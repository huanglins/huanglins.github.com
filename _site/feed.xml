<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>tnecniV</title>
    <description>// iOS Developer，也写Android和Python。正在学习全栈。很高兴认识你。</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Sat, 25 Aug 2018 22:18:17 +0800</pubDate>
    <lastBuildDate>Sat, 25 Aug 2018 22:18:17 +0800</lastBuildDate>
    <generator>Jekyll v3.8.3</generator>
    
      <item>
        <title>正义和自由</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;纳粹抓了共产党人的时候，&lt;/p&gt;

  &lt;p&gt;我沉默了；&lt;/p&gt;

  &lt;p&gt;我又不是共产党人。&lt;/p&gt;

  &lt;p&gt;.&lt;/p&gt;

  &lt;p&gt;当他们关了社民党人的时候，&lt;/p&gt;

  &lt;p&gt;我沉默了；&lt;/p&gt;

  &lt;p&gt;我又不是社民党人。&lt;/p&gt;

  &lt;p&gt;.&lt;/p&gt;

  &lt;p&gt;当他们抓工会成员的时候，&lt;/p&gt;

  &lt;p&gt;我没有抗议；&lt;/p&gt;

  &lt;p&gt;我又不是工会成员。&lt;/p&gt;

  &lt;p&gt;.&lt;/p&gt;

  &lt;p&gt;当他们抓犹太人的时候，&lt;/p&gt;

  &lt;p&gt;我沉默了；&lt;/p&gt;

  &lt;p&gt;我又不是犹太人。&lt;/p&gt;

  &lt;p&gt;.&lt;/p&gt;

  &lt;p&gt;当他们抓我的时候，&lt;/p&gt;

  &lt;p&gt;不再有什么人，能够为我抗议。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;今天，滴滴再一次成为舆论中心，又有一位女生打顺风车被奸杀，距离上一次郑州空乘打滴滴顺风车被奸杀才三个月。哪怕被害人不停的联系滴滴客服和警方，哪怕这个司机头一天才被投诉有骚扰乘客。可是，滴滴什么也没做，这三个月时间内滴滴毫无反思和改进，完全没有建立一套应急安全机制来保障乘客的安全，照常让该司机接单，导致悲剧再次发生。&lt;/p&gt;

&lt;p&gt;不过，我不想叨叨念地讲女性要注意安全什么之类的，这些被大家讲得反倒快当成儿戏了。我想讲的是另一个，是在我前几天看到的深/圳佳 士工人维权事件之后，内心久久不能平静，却发现国内媒体，微博一点消息都没有。才发现这一段时间内发生太多影响面巨大，和人民息息相关的事件，寿光洪灾，工人维权，疫苗事件，幼儿园虐童，滴滴事件。。。&lt;/p&gt;

&lt;p&gt;这些都是最近发生的事情，却发现很多人只当做饭后无聊的谈资，他们并没有意识到这些其实都是和他们息息相关的事情，只是这次恰巧幸运地没发生在他们自己身上而已。前几天我在医院投诉医生抽烟那会儿，我问引导台的工作人员投诉通道在哪里，他们第一想到的竟然是拉住我叫我别投诉，多大点事不是嘛。我反问他们，你们难道没意识到这是不对的吗？他们也就笑笑的走开了。&lt;/p&gt;

&lt;p&gt;我很早以前意识到我应该是一个公民而不是人民或老百姓的时候，看到社会不公会义愤填膺，会呼吁和抗争，我觉得这是作为一个公民而言基本的权利和义务。这在一些人看来反倒成了异类，他们说，何必呢，你又做得了什么呢？这就是为什么说国人对于压迫总是逆来顺受，那些印刻在民族骨子里的劣根性是去不掉的。国人总会对强权和不公选择性失忆，健忘，然后用厉害了我的国来安慰自己。有一天我在想，为什么国人总是健忘，我想到历史上讲，“3,5个日本兵就能押着成百上千的中国人”，他们难道不会反抗吗？他们估计从来就没想过反抗这事儿，因为中国人最缺乏”思想”，最缺乏拥有”思想”的历史，最缺乏思想的充分自由交流。这是因为自古以来，中国人的“思想”交流、言论“信息”交流，早就已经，甚至永远都处于统治者所极力维护的封闭的、禁锢的、点滴不漏的“一滩死水”，乃至“酱缸”之中。&lt;/p&gt;

&lt;p&gt;不过这几年来，随着80,90后成为这个社会的活跃思想核心，会看到越来越多不盲从，有独立思考的人。会看到舆论的作用越来越有效，微博一曝光比报警还有用。因为有更多的人在强调个人意志和自由，在行使一个公民应有的权力和义务，共同推动我们所处的这个社会进步。&lt;/p&gt;

&lt;p&gt;我想讲的是，我们永远避免不了天灾人祸，强权和不公的发生。但是看到不公的时候，如果我们什么也不做保持中立，那其实是选择在压迫者一边的。所以我们要去抨击和抗争，哪怕一个人的力量很小，但是思想影响的力量是无穷无尽的，只有这样才能唤醒更多失忆和健忘的国人。&lt;/p&gt;

&lt;p&gt;愿我们都有一颗勇敢的心，高喊正义与自由。&lt;/p&gt;

&lt;h4 id=&quot;x&quot;&gt;X&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.sina.com.cn/s/blog_4757606d0100el7j.html&quot;&gt;中国人为什么最“健忘”&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://huangxuan.me/2017/06/24/you-are-slaves/&quot;&gt;他是狗，你们便是苟奴隶&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Sat, 25 Aug 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/08/25/justice-and-freedom/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/08/25/justice-and-freedom/</guid>
        
        <category>freedom</category>
        
        
      </item>
    
      <item>
        <title>iOS 西培学堂 - 绕过人脸识别</title>
        <description>&lt;p&gt;最近在学习驾照，考科目一的时候需要在 &lt;strong&gt;西培学堂&lt;/strong&gt; 上面学习视频 1320 分钟。最主要的是每隔25分钟就要进行一次人脸识别验证，没有立即验证的话单次学习的时间就会失效。本着好好学习的态度，于是想看下能不能友好的进行人脸识别。..&lt;/p&gt;

&lt;h4 id=&quot;抓包测试&quot;&gt;抓包测试&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/img/p-xipeixuetang/uploadimage.png&quot; alt=&quot;&quot; /&gt;
抓包测试发现，人脸识别是在本地进行校验的，识别成功后再将识别的结果图片上传到服务器进行保存，并记录时间。那么这样的话，我们就可以在本地将人脸识别绕过，并传一张假图片给服务器就行了(手动滑稽..)&lt;/p&gt;

&lt;h4 id=&quot;导出头文件&quot;&gt;导出头文件&lt;/h4&gt;

&lt;p&gt;首先我们在 PP助手上下载已经脱壳的 IPA，然后导出所有头文件。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class-dump -H /xx/xx/tbtimingCount.app/tbtimingCount -o /Users/xx/Desktop/header
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;分析测试&quot;&gt;分析测试&lt;/h4&gt;

&lt;p&gt;搜索 &lt;code class=&quot;highlighter-rouge&quot;&gt;face&lt;/code&gt; 相关的文件
&lt;img src=&quot;/img/p-xipeixuetang/search_face.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;打开 Xcode 新建一个 &lt;a href=&quot;https://github.com/AloneMonkey/MonkeyDev&quot;&gt;MonkeyDev&lt;/a&gt; 工程，将 ipa 导入工程。&lt;/p&gt;

&lt;p&gt;经测试，&lt;strong&gt;TbCameraWalk&lt;/strong&gt; 这个文件用来处理学习计时和调用摄像头进行人脸识别的相关操作。
&lt;img src=&quot;/img/p-xipeixuetang/file_source.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;其中检测到需要人脸识别摄像头被调用时，会响应以下方法:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- (void)cwFaceInfoCallBack:(id)arg1;                                // 人脸识别结果
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;该文件中有一个人脸识别结果回调，返回一个图片信息，界面收到回调时将会调用接口上传人脸识别图片并计时。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/p-xipeixuetang/delegate_source.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;检测完成，关闭人脸识别界面方法为：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- (void)liveDetectSucess;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;编码&quot;&gt;编码&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/img/p-xipeixuetang/reverse_code.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在摄像头回调中直接将上面抓包的 Image Base64的数据，手动调用给 Delegate，测试发现后台服务器并没有再次进行图像比较。然后手动调用检测成功，关闭页面。&lt;/p&gt;

</description>
        <pubDate>Thu, 08 Mar 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/03/08/reverse-xipeixuetang/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/03/08/reverse-xipeixuetang/</guid>
        
        <category>iOS</category>
        
        <category>iOS 逆向</category>
        
        
      </item>
    
      <item>
        <title>iOS11/iPhone X 适配(填坑)指南</title>
        <description>&lt;h2 id=&quot;适配-ios11&quot;&gt;适配 iOS11&lt;/h2&gt;

&lt;h4 id=&quot;1-uitableview-contentoffset-下移-20&quot;&gt;1. UITableView contentOffset 下移 20&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;if (@available(iOS 11.0, *)) {
	if ([self.tableView respondsToSelector:@selector(setContentInsetAdjustmentBehavior:)]) {
		self.tableView.contentInsetAdjustmentBehavior = UIScrollViewContentInsetAdjustmentNever;
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;适配-iphone-x&quot;&gt;适配 iPhone X&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;手机型号&lt;/th&gt;
      &lt;th&gt;屏幕尺寸&lt;/th&gt;
      &lt;th&gt;屏幕密度&lt;/th&gt;
      &lt;th&gt;开发尺寸&lt;/th&gt;
      &lt;th&gt;像素尺寸&lt;/th&gt;
      &lt;th&gt;倍图&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;4/4S&lt;/td&gt;
      &lt;td&gt;3.5英寸&lt;/td&gt;
      &lt;td&gt;326ppi&lt;/td&gt;
      &lt;td&gt;320x486 pt&lt;/td&gt;
      &lt;td&gt;640x969 pt&lt;/td&gt;
      &lt;td&gt;@2x&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;5/5S/5C&lt;/td&gt;
      &lt;td&gt;4英寸&lt;/td&gt;
      &lt;td&gt;326ppi&lt;/td&gt;
      &lt;td&gt;320x568 pt&lt;/td&gt;
      &lt;td&gt;640x1136 px&lt;/td&gt;
      &lt;td&gt;@2x&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;6/6S/7/8&lt;/td&gt;
      &lt;td&gt;4.7英寸&lt;/td&gt;
      &lt;td&gt;326ppi&lt;/td&gt;
      &lt;td&gt;375x667 pt&lt;/td&gt;
      &lt;td&gt;750x1334 px&lt;/td&gt;
      &lt;td&gt;@2x&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;6+/6S+/7+/8+&lt;/td&gt;
      &lt;td&gt;5.5英寸&lt;/td&gt;
      &lt;td&gt;401ppi&lt;/td&gt;
      &lt;td&gt;414x736 pt&lt;/td&gt;
      &lt;td&gt;1242*2208 px&lt;/td&gt;
      &lt;td&gt;@3x&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;X&lt;/td&gt;
      &lt;td&gt;5.8英寸&lt;/td&gt;
      &lt;td&gt;458英寸&lt;/td&gt;
      &lt;td&gt;375x812 pt&lt;/td&gt;
      &lt;td&gt;1125x2436 px&lt;/td&gt;
      &lt;td&gt;@3x&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;首先需要在 &lt;code class=&quot;highlighter-rouge&quot;&gt;Assets.xcassets&lt;/code&gt; 中设置 iPhone X 的 &lt;code class=&quot;highlighter-rouge&quot;&gt;LaunchImage&lt;/code&gt;。一张&lt;code class=&quot;highlighter-rouge&quot;&gt;1125*2436&lt;/code&gt;的启动图。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/p-ios11-adapter/iphonex_launch.png&quot; alt=&quot;iPhone X&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;iPhone X&lt;/strong&gt; 宏定义&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#define iPhoneX ([UIScreen instancesRespondToSelector:@selector(currentMode)] ? \
        CGSizeEqualToSize(CGSizeMake(1125, 2436), [[UIScreen mainScreen] currentMode].size) : NO)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;我的开源项目&quot;&gt;我的开源项目&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/huanglins/VHLNavigation&quot;&gt;VHLNavigation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;实现各种导航栏间的无缝切换，微信红包样式导航栏样式切换，颜色过渡切换，导航栏背景图片切换，导航栏透明度切换，有无导航栏切换等。&lt;/p&gt;

</description>
        <pubDate>Tue, 19 Sep 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/09/19/ios11-iphonex-adapter/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/09/19/ios11-iphonex-adapter/</guid>
        
        <category>iOS</category>
        
        
      </item>
    
      <item>
        <title>MySQL 相关语法及函数</title>
        <description>&lt;h2 id=&quot;函数&quot;&gt;函数&lt;/h2&gt;

&lt;h4 id=&quot;合计函数&quot;&gt;合计函数&lt;/h4&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;函数&lt;/th&gt;
      &lt;th&gt;说明&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;AVG(column)&lt;/td&gt;
      &lt;td&gt;返回某一列的平均值&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;COUNT(column)&lt;/td&gt;
      &lt;td&gt;返回某一列的行数（不包括 NULL 值）&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;COUNT(*)&lt;/td&gt;
      &lt;td&gt;返回被选中的行数&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;MAX(column)&lt;/td&gt;
      &lt;td&gt;返回某列的最高值&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;MIN(column)&lt;/td&gt;
      &lt;td&gt;返回某列的最低值&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;SUM(column)&lt;/td&gt;
      &lt;td&gt;返回某列的总和&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;GROUP_CONCAT(column)&lt;/td&gt;
      &lt;td&gt;返回某列值连接组合而成的结果（通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;,&lt;/code&gt; 连接）&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&quot;数学函数&quot;&gt;数学函数&lt;/h4&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;函数&lt;/th&gt;
      &lt;th&gt;说明&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;ABS(x)&lt;/td&gt;
      &lt;td&gt;返回 x 的绝对值。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;CEIL(x) / CEILING(x)&lt;/td&gt;
      &lt;td&gt;返回大于或等于 x 的最小整数。 &lt;code class=&quot;highlighter-rouge&quot;&gt;SELECT CEIL(1.5)&lt;/code&gt; 返回 2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;FLOOL(x)&lt;/td&gt;
      &lt;td&gt;返回小于或等于 x 的最大整数。 &lt;code class=&quot;highlighter-rouge&quot;&gt;SELECT FLOOR(1.5)&lt;/code&gt; 返回1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;RAND()&lt;/td&gt;
      &lt;td&gt;返回 0-1 之间的随机数。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;SIGN(x)&lt;/td&gt;
      &lt;td&gt;返回 x 的符号。负数返回-1，0返回0，正数返回1。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;PI()&lt;/td&gt;
      &lt;td&gt;返回圆周率 (3.141593)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;TRUNCATE(x, y)&lt;/td&gt;
      &lt;td&gt;返回保留数值 x 到小数点后 y 位的值&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;ROUND(x)&lt;/td&gt;
      &lt;td&gt;返回离 x 最近的整数。&lt;code class=&quot;highlighter-rouge&quot;&gt;SELECT ROUND(1.23456)&lt;/code&gt; 返回 1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;ROUND(x, y)&lt;/td&gt;
      &lt;td&gt;保留离 x 最近的整数，但截断的时候要进行四舍五入。&lt;code class=&quot;highlighter-rouge&quot;&gt;SELECT ROUND(1.23456,3)&lt;/code&gt; 返回 1.235&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;POWER(x, y)&lt;/td&gt;
      &lt;td&gt;返回 x 的 y 次方。&lt;code class=&quot;highlighter-rouge&quot;&gt;SELECT POWER(2,3)&lt;/code&gt; 返回 8&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;SQRT(x)&lt;/td&gt;
      &lt;td&gt;返回 x 的平方根。&lt;code class=&quot;highlighter-rouge&quot;&gt;SELECT SQRT(25)&lt;/code&gt; 返回 5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;EXP(x)&lt;/td&gt;
      &lt;td&gt;返回 e(自然对数的底 2.718281828459)的 x 次方。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;MOD(x, y)&lt;/td&gt;
      &lt;td&gt;返回 x 除以 y 以后的余数。&lt;code class=&quot;highlighter-rouge&quot;&gt;SELECT MOD(5, 3)&lt;/code&gt; 返回2&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&quot;字符串函数&quot;&gt;字符串函数&lt;/h4&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;函数&lt;/th&gt;
      &lt;th&gt;说明&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;ASCII(s)&lt;/td&gt;
      &lt;td&gt;返回字符串 s 的 ASCII 码值。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;CHAR_LENGTH(s)&lt;/td&gt;
      &lt;td&gt;返回字符串 s 的字符数。&lt;code class=&quot;highlighter-rouge&quot;&gt;SELECT CHAR_LENGTH('你好123')&lt;/code&gt; 返回 5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;LENGTH(s)&lt;/td&gt;
      &lt;td&gt;返回字符串 s 的长度。&lt;code class=&quot;highlighter-rouge&quot;&gt;SELECT LENGTH('你好123')&lt;/code&gt; 返回 9&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;CONCAT(s1, s2, …)&lt;/td&gt;
      &lt;td&gt;将字符串 s1, s2 等多个字符串合并为一个字符串&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;CONCAT_WS(x, s1, s2, …)&lt;/td&gt;
      &lt;td&gt;同 CONCAT(s1, s2,…) 函数，不过两个字符串连接之间要加上 x。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;UPPER(s)&lt;/td&gt;
      &lt;td&gt;将字符串 s 的所有字母变成大写字母&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;LOWER(s)&lt;/td&gt;
      &lt;td&gt;将字符串 s 的所有字母变成小写字母&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;LEFT(s, n)&lt;/td&gt;
      &lt;td&gt;返回字符串 s 的前 n 个字符&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;RIGHT(s, n)&lt;/td&gt;
      &lt;td&gt;返回字符串 s 的后 n 个字符&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;REPEAT(s, n)&lt;/td&gt;
      &lt;td&gt;将字符串重复 n 次&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;SPACE(n)&lt;/td&gt;
      &lt;td&gt;返回 n 个空格&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;REPLACE(s, s1, s2)&lt;/td&gt;
      &lt;td&gt;将字符串 s2 替代字符串 s 中的字符串 s1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;STRCMP(s1, s2)&lt;/td&gt;
      &lt;td&gt;比较 s1和s2.返回 -1，0，1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;SUBSTRING(s1, s2)&lt;/td&gt;
      &lt;td&gt;获取从字符串 s 中的第 n 个位置开始长度为 len 的字符串。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;REVERSE(s)&lt;/td&gt;
      &lt;td&gt;将字符串 s 反转&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;LOAD_FILE(file_name)&lt;/td&gt;
      &lt;td&gt;读入文件并作为一个字符串返回文件内容&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&quot;日期和时间函数&quot;&gt;日期和时间函数&lt;/h4&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;函数&lt;/th&gt;
      &lt;th&gt;说明&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;NOW()&lt;/td&gt;
      &lt;td&gt;返回当前的日期和时间&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;CURDATE()&lt;/td&gt;
      &lt;td&gt;返回当前的日期&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;CURTIME()&lt;/td&gt;
      &lt;td&gt;返回当前的时间&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;MONTH(d)&lt;/td&gt;
      &lt;td&gt;返回日期 d 中的月份值&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;MONTHNAME(d)&lt;/td&gt;
      &lt;td&gt;返回日期 d 中的月份名称。如：August&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;HOUR(d)&lt;/td&gt;
      &lt;td&gt;返回时间 d 的小时值&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;MINUTE(d)&lt;/td&gt;
      &lt;td&gt;返回时间 d 的分钟值&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;SECOND(d)&lt;/td&gt;
      &lt;td&gt;返回时间 d 的秒钟值&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;DAYNAME(d)&lt;/td&gt;
      &lt;td&gt;返回日期d 中是星期几。如：Monday,Tuesday&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;DAYOFWEEK(d)&lt;/td&gt;
      &lt;td&gt;返回日期d 是星期几。如：1星期日，2星期一..&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;WEEK(d)&lt;/td&gt;
      &lt;td&gt;返回时间d 是本年的第几个星期，范围:0-&amp;gt;53&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;DAYOFMONTH(d)&lt;/td&gt;
      &lt;td&gt;计算时间d 是本月的第几天&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;DAYOFYEAR(d)&lt;/td&gt;
      &lt;td&gt;计算时间d 是本年的第几天&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;QUARTER(d)&lt;/td&gt;
      &lt;td&gt;计算时间d 是本年的第几个季节。返回 1-4&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;UNIX_TIMESTAMP()&lt;/td&gt;
      &lt;td&gt;以 unix 时间戳的形式返回当前时间&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;FROM_UNIXTIME(10位时间戳)&lt;/td&gt;
      &lt;td&gt;将 unix 时间戳转换为 YYYY-MM-dd HH:mm:ss 格式的时间&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;DATEDIFF(d1, d2)&lt;/td&gt;
      &lt;td&gt;计算日期 d1-d2 之间相隔的天数&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;ADDDATE(d, n)&lt;/td&gt;
      &lt;td&gt;计算日期 d 加上 n 天的日期&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;ADDDATE(d, INTERVAL expr type)&lt;/td&gt;
      &lt;td&gt;计算日期 d 加上一个日期值后的日期。例如: &lt;code class=&quot;highlighter-rouge&quot;&gt;ADDDATE(n, INTERVAL 1 DAY)&lt;/code&gt; 表示加上一天，&lt;code class=&quot;highlighter-rouge&quot;&gt;ADDDATE(INTERVAL -1 MONTH)&lt;/code&gt; 表示减去一个月。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;SUBDATE(d, n)&lt;/td&gt;
      &lt;td&gt;计算日期 d 减去 n 天的日期&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;DATEDIFF(d1, d2)&lt;/td&gt;
      &lt;td&gt;计算日期 d1 与 d2 之间相隔的天数&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&quot;条件判断&quot;&gt;条件判断&lt;/h4&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;函数&lt;/th&gt;
      &lt;th&gt;说明&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;IF(expr, v1, v2)&lt;/td&gt;
      &lt;td&gt;例如：&lt;code class=&quot;highlighter-rouge&quot;&gt;SELECT IF(1 &amp;gt; 0, '正确', '错误')&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;IFNULL(v1 , v2)&lt;/td&gt;
      &lt;td&gt;如果 v1 的值不为 NULL，则返回 v1，否则返回 v2。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;CASE&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;CASE 语法&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;第一种&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;CASE
	WHEN e1
	THEN v1
	WHEN e2
	THEN v2
	...
	ELSE vn
END
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;CASE 表示函数开始，END 表示函数结束。如果 e1，则返回 v1；如果 e2 成立，则返回 v2；当前全部不成立则返回 vn。而当一个成立，后面的就不执行。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;第二种&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;CASE expr
	WHEN e1 THEN v1
	WHEN e2 THEN v2
	...
	ELSE vn
END
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;如果表达式 expr 的值等于 e1，则返回 v1；如果等于 e2，则返回 v2。否则返回 vn。&lt;/p&gt;

&lt;h4 id=&quot;系统信息函数&quot;&gt;系统信息函数&lt;/h4&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;函数&lt;/th&gt;
      &lt;th&gt;说明&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;VERSION()&lt;/td&gt;
      &lt;td&gt;返回数据库的版本号&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;CONNECTION_ID()&lt;/td&gt;
      &lt;td&gt;返回服务器的连接数&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;USER()&lt;/td&gt;
      &lt;td&gt;返回当前的用户&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;LAST_INSERT_ID()&lt;/td&gt;
      &lt;td&gt;返回最近生成的 AUTO_INCREMENT 值&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&quot;加密函数&quot;&gt;加密函数&lt;/h4&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;函数&lt;/th&gt;
      &lt;th&gt;说明&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;PASSWORD(str)&lt;/td&gt;
      &lt;td&gt;对 str 字符串进行加密&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;MD5(str)&lt;/td&gt;
      &lt;td&gt;对字符串 str 进行散列，用于一些普通的不需要解密的数据进行加密&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;SHA(str)&lt;/td&gt;
      &lt;td&gt;SHA 加密&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;SHA1(str)&lt;/td&gt;
      &lt;td&gt;SHA1 加密&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;ENCODE(str, key) , DECODE(str, key)&lt;/td&gt;
      &lt;td&gt;使用 key 作为秘钥加密解密字符串 str，这两个函数是一对的。加密和解密。&lt;em&gt;非要注意的是，对应字段用 blob 类型&lt;/em&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&quot;其他函数&quot;&gt;其他函数&lt;/h4&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;函数&lt;/th&gt;
      &lt;th&gt;说明&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;CONVERT(s USING utf8)&lt;/td&gt;
      &lt;td&gt;将字符串转换成 utf8&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;参考学习地址&quot;&gt;参考学习地址&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://www.jianshu.com/p/32bc449a1bf6&quot;&gt;MySql函数大全&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;http://www.w3school.com.cn/sql/index.asp&quot;&gt;SQL 教程&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;http://www.jb51.net/article/40179.htm&quot;&gt;MySql常用函数汇总&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Sat, 26 Aug 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/08/26/mysql-function/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/08/26/mysql-function/</guid>
        
        <category>MySQL</category>
        
        
      </item>
    
      <item>
        <title>CentOS 防火墙配置之 iptables和DDoS deflate</title>
        <description>&lt;h2 id=&quot;iptables&quot;&gt;iptables&lt;/h2&gt;
&lt;p&gt;netfilter/iptables IP 信息包过滤系统是一种功能强大的工具，可用于添加、编辑和除去规则，这些规则是在做信息包过滤决定时，防火墙所遵循和组成的规则。这些规则存储在专用的信息包过滤表中，而这些表集成在 Linux 内核中。在信息包过滤表中，规则被分组放在我们所谓的链（chain）中。&lt;/p&gt;

&lt;p&gt;netfilter 组件也称为内核空间（kernelspace），是内核的一部分，由一些信息包过滤表组成，这些表包含内核用来控制信息包过滤处理的规则集。
iptables 建立在 netfilter 架构基础上的一个包过滤管理工具，也称为用户空间（userspace），它使插入、修改和除去信息包过滤表中的规则变得容易。
iptables包含4个表，5个链。其中表是按照对数据包的操作区分的，链是按照不同的Hook点来区分的，表和链实际上是netfilter的两个维度。&lt;/p&gt;

&lt;h4 id=&quot;1iptables-语法规则&quot;&gt;1.iptables 语法规则&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;iptables [-t 表] 大写选项子命令(-A) [规则号] 链名 匹配标准(-s xx.xx.xx.xx) -j 目标（规则）
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;注意：所有表名必须小写，命令动作必须大写，链名必须大写，匹配标准必须小写，目标规则必须大写&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&quot;2iptables-表&quot;&gt;2.iptables 表&lt;/h4&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;filter&lt;/td&gt;
      &lt;td&gt;一般的数据包过滤功能&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;nat&lt;/td&gt;
      &lt;td&gt;用于nat(网络地址转换)功能（端口映射，地址映射等）&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;mangle&lt;/td&gt;
      &lt;td&gt;用于对特定数据包进行修改&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;raw&lt;/td&gt;
      &lt;td&gt;优先级最高，设置raw时一般是为了不再让iptables做数据包的链接跟踪处理，提高性能&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;表的处理优先级：raw &amp;gt; mangle &amp;gt; nat &amp;gt; filter&lt;/p&gt;

&lt;h4 id=&quot;3iptables-链&quot;&gt;3.iptables 链&lt;/h4&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;PREROUTING&lt;/td&gt;
      &lt;td&gt;数据包进入路由表之前&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;INPUT&lt;/td&gt;
      &lt;td&gt;通过路由表后目的地为本机&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;FORWARDING&lt;/td&gt;
      &lt;td&gt;通过路由表后，目的地不为本机&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;OUTPUT&lt;/td&gt;
      &lt;td&gt;由本机产生，向外转发&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;POSTROUTIONG&lt;/td&gt;
      &lt;td&gt;发送到网卡之前。&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;如图：
&lt;img src=&quot;/img/p-iptables/iptables_chain.png&quot; alt=&quot;&quot; /&gt;
iptables 中表和链的对应关系如下：
&lt;img src=&quot;/img/p-iptables/iptables_chain1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;表&lt;/th&gt;
      &lt;th&gt;包含的规则链&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;filter&lt;/td&gt;
      &lt;td&gt;INPUT , FORWARD , OUTPUT&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;nat&lt;/td&gt;
      &lt;td&gt;PREROUTING , OUTPUT , POSTROUTING&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;mangle&lt;/td&gt;
      &lt;td&gt;PREROUTING , OUTPUT , POSTROUTING&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&quot;4iptables-相关参数&quot;&gt;4.iptables 相关参数&lt;/h4&gt;

&lt;h5 id=&quot;41命令参数&quot;&gt;4.1.命令参数&lt;/h5&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;-A&lt;/td&gt;
      &lt;td&gt;向规则链中添加一条规则，默认被添加到末尾&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-I&lt;/td&gt;
      &lt;td&gt;插入一条规则，默认会被插入到首部&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-T&lt;/td&gt;
      &lt;td&gt;指定要操作的表，默认是 &lt;em&gt;filter&lt;/em&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-D&lt;/td&gt;
      &lt;td&gt;从规则链中删除规则，可以指定序号或者匹配的规则来删除&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-R&lt;/td&gt;
      &lt;td&gt;进行规则替换&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-F&lt;/td&gt;
      &lt;td&gt;清空所选的链，重启后恢复&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-N&lt;/td&gt;
      &lt;td&gt;新建用户自定义规则链&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-X&lt;/td&gt;
      &lt;td&gt;删除用户自定义的规则链&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h5 id=&quot;42匹配标准参数&quot;&gt;4.2.匹配标准参数&lt;/h5&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;-p&lt;/td&gt;
      &lt;td&gt;用来指定协议。可以是 tcp，udp，icmp等，也可以是数字的协议号&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-s&lt;/td&gt;
      &lt;td&gt;指定源地址&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-d&lt;/td&gt;
      &lt;td&gt;指定目的地址&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-i&lt;/td&gt;
      &lt;td&gt;进入接口&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-o&lt;/td&gt;
      &lt;td&gt;流出接口&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;–sport&lt;/td&gt;
      &lt;td&gt;源端口&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;–dport&lt;/td&gt;
      &lt;td&gt;目的端口，端口必须和协议一起来配合使用&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h5 id=&quot;43目标规则&quot;&gt;4.3.目标规则&lt;/h5&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;-j&lt;/td&gt;
      &lt;td&gt;采取的动作。ACCEPT(接收)，DROP(丢弃)，REJECT(拒绝)，&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;RETURN(返回主键继续匹配)，REDIRECT(端口重定向)，&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;MASQUERADE(地址伪装)，DNAT(目标地址转换)，SNAT(源地址转换)，MARK(打标签)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&quot;5iptables-实际操作&quot;&gt;5.iptables 实际操作&lt;/h4&gt;

&lt;p&gt;以上是 iptables 语法规则的相关参数和说明，现在让我们来实际操作使用一下。一般常用操作的是 &lt;code class=&quot;highlighter-rouge&quot;&gt;filter&lt;/code&gt;表， &lt;code class=&quot;highlighter-rouge&quot;&gt;mangle&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;raw&lt;/code&gt; 请自行 google 高级用法。&lt;/p&gt;

&lt;h5 id=&quot;51基本使用&quot;&gt;5.1.基本使用&lt;/h5&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;列出 iptables 规则
# iptables -L		# 默认选择 filter 表
# iptables -t nat -L

清除 内置规则
# iptables -F
# iptables -t nat -F

清除自定义规则
# iptables -X
# iptables -t nat -F 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;52filter&quot;&gt;5.2.filter&lt;/h5&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;禁止某个IP访问
# iptables -I INPUT -s xxx.xxx.xx.x -j DROP

服务器禁止被 ping
# iptables -A INPUT -p icmp -j DROP
禁止某个 IP ping 服务器
# iptables -A INPUT -p icmp -s xxx.xxx.xx.x -j DROP
只允许某个 IP ping 服务器
# iptables -I INPUT -p icmp -s xxx.xxx.xx.x -j ACCEPT

开启端口服务
# iptables -A OUTPUT -p udp -o eth0 --dport 53 -j ACCEPT
# iptables -A INPUT -p udp -i eth0 --sport 53 -j ACCEPT

开启转发功能
- 普通转发，假设 eth0 连接内网，eth1 连接公网。(必须要有2块网卡)
# iptables -A FORWARD -i eth0 -o eth1 -j ACCEPT
- 只允许已建连接以及相关连接对内转发
# iptables -A FORWARD -i eth0 -o eth1 -m state --state RELATED,ESTABLISHED -j ACCEPT
- 允许对外转发
# iptables -A FORWARD -i eth1 -o eth0 -j ACCEPT

允许 loopback 回环通讯
# iptables -A INPUT -i lo -p all -j ACCEPT
# iptables -A OUTPUT -o lo -p all -j ACCEPT

实例：当总连接数超过100时，启用 litmit/minute 限制
# iptables -A INPUT -p tcp --dport 80 -m limit --limit 25/minute --limit-burst 100 -j ACCEPT
- litmit 25/minute 每分钟限制最大连接数为25
- litmit-burst 100 当总连接数超过100时，启动 limit/minute 限制
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;53-nat&quot;&gt;5.3 nat&lt;/h5&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;目的地址转换，映射内部地址
# iptables -t nat -A PREROUTING -i ppp0 -p tcp --dprot 81 -j DNAT --to 192.168.0.2:80
# iptables -t nat -A PREROUTING -i ppp0 -p tcp --dprot 81 -j DNAT --to 192.168.0.1-192.168.0.10

源地址转换，隐藏内部地址
# iptables -t nat -A POSTROUTING -s 192.168.0.0/24 -j SNAT --to 1.1.1.1
# iptables -t nat -A POSTROUTING -s 192.168.0.0/24 -j SNAT --to 1.1.1.1-1.1.1.10

地址伪装，动态ip的NAT（地址转换）
# iptables -t nat -A POSTROUTING -s 192.168.0.0/24 -j MASQUERADE
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;masquerade&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;snat&lt;/code&gt; 的主要区别在于，snat 是把源地址转换为固定的 IP 地址或者是地址池，而 masquerade 在 adsl 等方式拨号上网时候非常有用，因为是拨号上网所以网卡的外网IP经常变化，这样在进行地址转换的时候就要在每次都要修改转换策略里面的 ip，使用 masquerade 就很好的解决了这个问题，他会自己去探测外网卡获得的ip地址然后自动进行地址转换，这样就算外网获得的 ip 经常变化也不用人工干预了。&lt;/p&gt;

&lt;h5 id=&quot;54-删除规则&quot;&gt;5.4 删除规则&lt;/h5&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;iptables -D chain rulenum [options]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;chain 是链的意思，就是 INPUT FORWARD 之类的定语，rulenum 是该条规则的编号，从1开始。可以使用&lt;code class=&quot;highlighter-rouge&quot;&gt;iptables -L INPUT --line&lt;/code&gt;列出指定的链的规则的编号来。然后通过编号删除&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;iptables -D INPUT 1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;第二种办法是 &lt;code class=&quot;highlighter-rouge&quot;&gt;-A&lt;/code&gt; 命令的映射，不过用 &lt;code class=&quot;highlighter-rouge&quot;&gt;-D&lt;/code&gt; 替换 &lt;code class=&quot;highlighter-rouge&quot;&gt;-A&lt;/code&gt; 。当你的链中规则很复杂，而你不想计算它们的编号的时候这就十分有用了。
也就是说，你如何一开始时用 &lt;code class=&quot;highlighter-rouge&quot;&gt;iptables -A.... &lt;/code&gt;语句定义了一个规则，那么删除此条规则时直接用 &lt;code class=&quot;highlighter-rouge&quot;&gt;-D&lt;/code&gt; 来代替 &lt;code class=&quot;highlighter-rouge&quot;&gt;-A&lt;/code&gt;， 其余的都不变即可，而不需要什么编号了。&lt;/p&gt;

&lt;h2 id=&quot;ddos-deflate&quot;&gt;DDoS deflate&lt;/h2&gt;
&lt;p&gt;DDos deflate 是一款免费的用来防御和减轻 DDos 攻击的脚本。它通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;netstat&lt;/code&gt; 监测跟踪与服务器创建了大量网络连接的IP地址，在监测到某个节点超过预设的限制时，该程序会通过 APF 或者 iptables 对这些 IP 进行一段时间内的禁止访问。&lt;/p&gt;

&lt;p&gt;DDoS deflate官方网站：&lt;a href=&quot;http://deflate.medialayer.com/&quot;&gt;http://deflate.medialayer.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;如何确定是否受到DDoS攻击了呢?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;执行 &lt;em&gt;netstat&lt;/em&gt; 命令&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;netstat -ntu | awk '{print $5}' | cut -d: -f1 | sort | uniq -c | sort -n
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;或者&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;netstat -ntu | awk '{print $5}' | cut -d: -f1 | sed -n '/[0-9]/p' | sort |
 uniq -c | sort -nr
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;下一段会过滤掉其中不是 IP 的一些记录，结果如下：
&lt;img src=&quot;/img/p-iptables/netstat_result.png&quot; alt=&quot;&quot; /&gt;
第一个表示每个IP当前的连接数，一般IP几十个以内都算比较正常。如果突然某个IP的连接数有成百上千个，那肯定就不正常了。&lt;/p&gt;

&lt;h4 id=&quot;1安装-ddos-deflate&quot;&gt;1.安装 DDoS deflate&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# cd /tmp
# wget http://www.inetbase.com/scripts/ddos/install.sh
# chmod 0700 install.sh
# ./install.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;分别是：1.下载文件，2.给文件添加权限，3.执行安装 &lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&quot;2配置-ddos-deflate&quot;&gt;2.配置 DDoS deflate&lt;/h4&gt;

&lt;p&gt;文件安装目录位于 &lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/local/ddos&lt;/code&gt;，其中文件有：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;ddos.conf&lt;/strong&gt;     	// 相关配置文件&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;ssos.sh&lt;/strong&gt;		  		// shell脚本&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;ignore.ip.list&lt;/strong&gt;	// ip白名单&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;LICENSE&lt;/strong&gt;				// 许可&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ddos.conf&lt;/code&gt; 配置如下&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;##### Paths of the script and other files
PROGDIR=&quot;/usr/local/ddos&quot;
PROG=&quot;/usr/local/ddos/ddos.sh&quot;
IGNORE_IP_LIST=&quot;/usr/local/ddos/ignore.ip.list&quot; # ip 地址白名单
CRON=&quot;/etc/cron.d/ddos.cron&quot;	# 定时任务位置
APF=&quot;/etc/apf/apf&quot;		# APF
IPT=&quot;/sbin/iptables&quot;		# iptables

##### frequency in minutes for running the script
##### Caution: Every time this setting is changed, run the script with --cron
#####          option so that the new frequency takes effect
FREQ=1		# 检测时间间隔，默认为1分钟

##### How many connections define a bad IP? Indicate that below.
NO_OF_CONNECTIONS=150		# 一个IP下的最大连接数,超过就会屏蔽

##### APF_BAN=1 (Make sure your APF version is atleast 0.96)
##### APF_BAN=0 (Uses iptables for banning ips instead of APF)
APF_BAN=0	# 使用 APF还是iptables，推荐使用 iptables，将APF_BAN 改为0即可。
# APF 是基于 iptables 的防火墙

##### KILL=0 (Bad IPs are'nt banned, good for interactive execution of script)
##### KILL=1 (Recommended setting)
KILL=1		# 是否屏蔽禁止IP，默认。

##### An email is sent to the following address when an IP is banned.
##### Blank would suppress sending of mails
EMAIL_TO=&quot;1@vincents.cn&quot;	# 当IP被屏蔽时给指定邮箱发送邮件。

##### Number of seconds the banned ip should remain in blacklist.
BAN_PERIOD=600			# 禁用IP时长,默认为600秒
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ddos.sh&lt;/code&gt; 中，可以将第 117 行的内容修改为，就是上面那句 &lt;em&gt;netstat&lt;/em&gt; 命令：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;netstat -ntu | awk '{print $5}' | cut -d: -f1 | sed -n '/[0-9]/p' | sort |
 uniq -c | sort -nr
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;有文件内容更改后，执行：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# sh /usr/local/ddos/ddos.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;会在&lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/cron.d/&lt;/code&gt;目录下生成一个定时任务&lt;code class=&quot;highlighter-rouge&quot;&gt;ddos.cron&lt;/code&gt;。内容为：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;0-59/1 * * * * root /usr/local/ddos/ddos.sh &amp;gt;/dev/null 2&amp;gt;&amp;amp;1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;3测试&quot;&gt;3.测试&lt;/h4&gt;

&lt;p&gt;接下来你就可以使用压力测软件 &lt;a href=&quot;/2017/03/28/web-pressure-test/&quot;&gt;webbench,Siege&lt;/a&gt; 来进行测试实验了。我的测试结果如下， 通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;webbench&lt;/code&gt; 开启压力测试后，IP就立即被封禁，且很快就收到邮件,效果还是非常明显的。
&lt;img src=&quot;/img/p-iptables/ddos_result.png&quot; alt=&quot;&quot; /&gt;
ps: 为了让图片少占点位置，只有这么拼接一下了。将就看。。。&lt;/p&gt;

&lt;h2 id=&quot;参考学习&quot;&gt;参考学习&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/argb/p/3535179.html&quot;&gt;iptabls&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.liusuping.com/ubuntu-linux/iptables-firewall-setting.html&quot;&gt;iptabls配置详解&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.linuxidc.com/Linux/2012-08/67505.htm&quot;&gt;iptables四个表与五个链间的处理关系&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://yq.aliyun.com/ziliao/116528?spm=5176.8246799.0.0.JIvrMb&quot;&gt;Shell实现的iptables管理脚本&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.vpser.net/security/ddos-deflate.html&quot;&gt;DDoS deflate - Linux下防御/减轻DDOS攻击&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
        <pubDate>Sat, 26 Aug 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/08/26/iptables_ddos-deflate/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/08/26/iptables_ddos-deflate/</guid>
        
        <category>CentOS</category>
        
        <category>Web服务器</category>
        
        
      </item>
    
      <item>
        <title>Charles 抓取HTTPS数据包</title>
        <description>&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://www.charlesproxy.com/&quot;&gt;Charles&lt;/a&gt; 是一款在Mac下常用的网络封包截取工具。Charles 可以将自己设置为系统的网络代理服务器，使得所有的网络请求都通过它来完成。这样，方便自己开发的时候进行接口调试和已经调试别的APP网络接口。。。&lt;/p&gt;

&lt;h2 id=&quot;启用http代理&quot;&gt;启用HTTP代理&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/img/p-charles/charles-set.png&quot; alt=&quot;&quot; /&gt;
这里启用 Charles 的代理，设置代理IP 为 &lt;code class=&quot;highlighter-rouge&quot;&gt;8888&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;打开终端输入 ifconfig 查看当前的局域网IP&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ifconfig
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/img/p-charles/ifconfig.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;然后将手机连入同一个Wi-Fi, 在Wi-Fi的 HTTP代理中设置为电脑的IP地址和端口。&lt;/p&gt;

&lt;p&gt;Charles弹出确认框，点击Allow按钮即就可以愉快的获取到数据包信息啦。&lt;/p&gt;

&lt;h2 id=&quot;如何使用https代理&quot;&gt;如何使用HTTPS代理&lt;/h2&gt;

&lt;h4 id=&quot;电脑端设置&quot;&gt;电脑端设置&lt;/h4&gt;

&lt;p&gt;想要抓取https的包的话，需要使用Charles自己的CA证书并进行
&lt;img src=&quot;/img/p-charles/charles-https-set.png&quot; alt=&quot;&quot; /&gt;
打开钥匙串，点击证书详情，设置为始终信任
&lt;img src=&quot;/img/p-charles/chain-set.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;手机端设置&quot;&gt;手机端设置&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/img/p-charles/charles-https-set-ios.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如果你已经将手机的网络代理设置 Charles，那么可以直接在浏览器中输入网址 &lt;code class=&quot;highlighter-rouge&quot;&gt;charlesproxy.com/getssl&lt;/code&gt; ,会提示安装证书描述文件:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/p-charles/iphone-profile.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;安装证书
点击安装即可，如果出现的不是这个界面，那么把链接换成 https://www.charlesproxy.com/documentation/additional/legacy-ssl-proxying/，点击安装 itself 后面的 here 就可以了。&lt;/p&gt;

&lt;p&gt;设置监听端口&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/p-charles/charles-https-set2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这里是设置所有的地址的 443 端口都进行代理。如果只抓取部分，也可以进行单独的地址设置。&lt;/p&gt;

&lt;p&gt;现在就可以愉快的玩耍啦~ 以知乎为例&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/p-charles/charles-https-result-zhihu.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;问题解决&quot;&gt;问题解决&lt;/h2&gt;
&lt;h4 id=&quot;ios-103-以上-https-代理问题&quot;&gt;iOS 10.3 以上 HTTPS 代理问题&lt;/h4&gt;
&lt;p&gt;因为升级到 iOS11 后发现 HTTPS 不能使用了，需要在&lt;code class=&quot;highlighter-rouge&quot;&gt;关于本机&lt;/code&gt;-&lt;code class=&quot;highlighter-rouge&quot;&gt;证书信任设置&lt;/code&gt;中开启完全信任。
&lt;img src=&quot;/img/p-charles/charles-https-set-about.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;参考学习&quot;&gt;参考学习&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.infoq.com/cn/articles/network-packet-analysis-tool-charles&quot;&gt;iOS开发工具——网络封包分析工具Charles&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/chenlogin/p/5849471.html&quot;&gt;charles https抓包&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
        <pubDate>Wed, 09 Aug 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/08/09/charles-https-proxy/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/08/09/charles-https-proxy/</guid>
        
        <category>macOS</category>
        
        
      </item>
    
      <item>
        <title>CentOS LAMP/LEMP 等各种服务环境搭建</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;由于之前捣鼓学习一些东西所作的笔记等都存放在印象笔记中，比较分散和杂乱。加上又准备更新自己的博客，
于是将折腾阿里云服务器整理出来，这篇会持续更新。(&lt;em&gt;^__^&lt;/em&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;l---linux--一台云服务器&quot;&gt;L - Linux &amp;gt; 一台云服务器&lt;/h2&gt;

&lt;p&gt;首先你得有一台云服务器。常用的云服务提供商有，&lt;code class=&quot;highlighter-rouge&quot;&gt;阿里云&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;腾讯云&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;亚马逊 AWS&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;微软 Azure&lt;/code&gt;等。
但是在国内的话，个人还是比较推荐阿里云。最低配一个月60块钱的样子。&lt;/p&gt;

&lt;p&gt;购买后阿里云会给你分配一个云服务器的公网IP地址。通过 SSH 连接云服务器：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ssh root@xxx.xxx.xxx.xxx

输入密码
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;yum&quot;&gt;yum&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;Yum（全称为 Yellow dog Updater, Modified）是一个在Fedora和RedHat以及CentOS中的Shell前端软件包管理器。基于RPM包管理，能够从指定的服务器自动下载RPM包并且安装，可以自动处理依赖性关系，并且一次安装所有依赖的软件包，无须繁琐地一次次下载、安装。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;通过 yum 命令我们可以很方便的安装管理例如 mysql，php等常用的软件包服务。&lt;/p&gt;

&lt;p&gt;yum 命令格式为：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;yum [options] [command] [package ...]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;更新源&quot;&gt;更新源&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;yum update

yum upgrade
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;a---apache---httpd&quot;&gt;A - Apache -&amp;gt; httpd&lt;/h2&gt;

&lt;p&gt;Apache 在Linux系统中，叫 &lt;strong&gt;httpd&lt;/strong&gt;。O__O “…&lt;/p&gt;

&lt;h4 id=&quot;安装-apache&quot;&gt;安装 Apache&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;yum install httpd
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;&amp;gt;&lt;/strong&gt; 启动Apache&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;systemctl start httpd.service 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这时在浏览器中输入IP地址，你可以看到Apache的Test页面。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&amp;gt;&lt;/strong&gt; 关闭Apache&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;systemctl stop httpd.service
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;&amp;gt;&lt;/strong&gt; 设置Apache开启自动启动&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;systemctl enable httpd.service 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;使用&quot;&gt;使用&lt;/h4&gt;

&lt;p&gt;Apache 在CentOS中默认的根目录在 &lt;code class=&quot;highlighter-rouge&quot;&gt;/var/www/html&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Apache 相关的配置文件目录在 &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/httpd/conf/httpd.conf&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;其他相关的配置文件目录在 &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/httpd/conf.d/&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;j---java&quot;&gt;J - Java&lt;/h2&gt;

&lt;p&gt;查看可用的 JDK软件包列表:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;yum search java | grep -i --color JDK
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;安装 java-jdk&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;yum install java-1.8.0-openjdk  java-1.8.0-openjdk-devel  #安装openjdk
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;查看当前 java 版本&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;java -version     #查看java版本
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;java 存放的地址  &lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/lib/jvm&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&quot;配置-java-环境变量&quot;&gt;配置 Java 环境变量&lt;/h4&gt;

&lt;p&gt;将 jdk 拷贝到 /usr/local/java 目录下。没有的话 &lt;code class=&quot;highlighter-rouge&quot;&gt;mkdir&lt;/code&gt;创建，统一放到 /usr/local 目录下便于管理。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd /usr/lib/jvm

cp -R java-1.8.0-openjdk /usr/local/java/jdk1.8
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h6 id=&quot;配置环境变量&quot;&gt;配置环境变量&lt;/h6&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vi /etc/profile
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;将下面内容添加到文件末尾，for循环后面。这里直接引用 /usr/lib/jvm 目录下的 JDK也是可以的。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;export JAVA_HOME=/usr/local/java/jdk1.8
export PATH=$JAVA_HOME/bin:$PATH:
export JAVA_BIN=$JAVA_HOME/bin
export CLASSPATH=.:$JAVA_HOME/lib/tools.jar:$JAVA_HOME/lib/dt.jar
export JAVA_HOME JAVA_BIN PATH CLASSPAT
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;让配置立即生效&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;source /etc/profile
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;检查环境变量&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# echo $JAVA_HOME

-&amp;gt; /usr/local/java/jdk1.8
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;t---tomcat&quot;&gt;T - Tomcat&lt;/h2&gt;

&lt;p&gt;Tomcat 官网 : &lt;a href=&quot;http://tomcat.apache.org/&quot;&gt;http://tomcat.apache.org/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;选择一个版本的 tar.gz 文件进行下载&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# wget http://ftp.cuhk.edu.hk/pub/packages/apache.org/tomcat/tomcat-6/v6.0.51/bin/apache-tomcat-6.0.51.tar.gz

# tar -zxvf apache-tomcat-6.0.51.tar.gz   # 解压

拷贝 tomcat 到 /usr/local 目录下

# cp -R apache-tomcat-6.0.51 /usr/local/tomcat7
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;使用-1&quot;&gt;使用&lt;/h4&gt;

&lt;p&gt;启动Tomcat&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd /usr/local/tomcat7/bin

sh startup.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;停止Tomcat&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sh shutdown.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;m---mysql---mariadb&quot;&gt;M - MySQL -&amp;gt; MariaDB&lt;/h2&gt;

&lt;p&gt;MySQL本身是开源免费的，但是在Mysql被Oracle收购后，有将MySQL闭源的风险。MariaDB是MySQL源代码的一个分支，是由MySQL的创始人麦克尔·维德纽斯主导开发，使用这些分支避免这个潜在的风险。&lt;/p&gt;

&lt;p&gt;详细的一些区别参考这篇：&lt;a href=&quot;http://bijian1013.iteye.com/blog/2315665&quot;&gt;浅谈MySQL和mariadb区别&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&amp;gt;&lt;/em&gt; centOS 7 以后，软件源中默认的是MariaDB 而不是MySQL&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&amp;gt;&lt;/strong&gt; 安装 MariaDB&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;yum install mariadb-server -y
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;&amp;gt;&lt;/strong&gt; 启动 MariaDB&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;systemctl start mariadb.service
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;&amp;gt;&lt;/strong&gt; 停止 MariaDB&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;systemctl stop mariadb.service
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;&amp;gt;&lt;/strong&gt; 设置开启自动启动&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;systemctl enable mariadb.service
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;进入MySQL，第一次进入不用密码需要自己修改&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[root@VM_140_194_centos ~]# mysql
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/img/p-centos-lnmp/mysql-login.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&amp;gt;&lt;/strong&gt; 修改MySQL密码&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mysql_secure_installation
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;根据提示进行设置。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&amp;gt;&lt;/strong&gt; 创建用户以及分配权限&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 创建用户
CREATE USER 'vincent'@'localhost' IDENTIFIED BY 'password';
# 分配权限
grant create,alter,select,insert,update,delete on *.* to vincent@localhost IDENTIFIED BY 'password';

# 收回权限
revoke create,alter,select,insert,update,delete on mysql.* from 'vincent'@'localhost';
# 刷新系统权限
flush privileges;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;&amp;gt;&lt;/strong&gt; 常见错误&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Access denied for user ‘root@localhost’ (using password:NO)&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; systemctl stop mariadb.service
&amp;gt; mysqld_safe --skip-grant-tables &amp;amp;
# 可以不用密码进入MySQL
&amp;gt; mysql
&amp;gt; use mysql;
&amp;gt; truncate table user;
&amp;gt; flush privileges;

&amp;gt; grant all privileges on *.* to root@localhost identified by 'YourNewPassword' with grant option;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;备份数据库&quot;&gt;备份数据库&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mysqldump -u[用户名] -p[用户密码] --host=[localhost(可以不填)] [导出的数据库名] | gzip &amp;gt;  [导出地址]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;例如：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mysqldump -uroot -proot --host=localhost database | gzip &amp;gt; /home/backup/database.sql.gz
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;推荐一个文件/数据库监控和数据库备份的脚本工具。
&lt;a href=&quot;https://github.com/zsenliao/shellMonitor/blob/master/&quot;&gt;shellMonitor&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;p---php&quot;&gt;P - PHP&lt;/h2&gt;

&lt;p&gt;我自己使用到PHP的地方一般也只是用它来使用 &lt;strong&gt;PHPMyAdmin&lt;/strong&gt;，而web服务也是用 Java或者Python开发的，所以PHP用得比较少。&lt;/p&gt;

&lt;h4 id=&quot;安装&quot;&gt;安装&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;yum install php
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;&amp;gt;&lt;/strong&gt; 需要重启一下Apache服务&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;service httpd restart
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;测试一下是否安装好&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# vi /var/www/html/info.php

输入 i 进行插入

# &amp;lt;?php phpinfo(); ?&amp;gt;

ESC -&amp;gt; 英文冒号 -&amp;gt; wq 保存退出
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后再浏览器地址中输入 &lt;code class=&quot;highlighter-rouge&quot;&gt;ip地址/info.php&lt;/code&gt;，这时应该能看到到当前的 php信息。&lt;/p&gt;

&lt;h4 id=&quot;关联-php-和-mysql&quot;&gt;关联 PHP 和 MySQL&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;yum install php-mysql php-gd php-imap php-ldap php-odbc php-pear php-xml php-xmlrpc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;安装完后重启 Apache&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;systemctl restart httpd.service
或者
service httpd restart
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后在 info.php 中就能看到mysql的模块。&lt;/p&gt;

&lt;h4 id=&quot;安装-phpmyadmin&quot;&gt;安装 phpMyadmin&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;yum install phpMyAdmin php-mcrypt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;安装完后会在 &lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/share&lt;/code&gt; 目录下有个 &lt;strong&gt;phpMydmin&lt;/strong&gt;目录，将该目录拷贝的 html 目录下。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# cd /usr/share
# cp -a phpMyAdmin/ /var/www/html/phpmyadmin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h6 id=&quot;一些错误&quot;&gt;一些错误&lt;/h6&gt;

&lt;p&gt;The mbstring extension is missing. Please check your PHP configuration.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# vi /etc/php.ini
	
在 [PHP] 下面插入
	
# extension=php_mbstring.dll
   
* 重启 httpd.service
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You don’t have permission to access /phpmyadmin/ on this server.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vi /etc/httpd/conf.d/phpMyAdmin.conf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/img/p-centos-lnmp/phpmyadmin-permission.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;n---nginx&quot;&gt;N - Nginx&lt;/h2&gt;

&lt;h4 id=&quot;有了apache为什么要使用-nginx&quot;&gt;有了Apache为什么要使用 Nginx&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;http://willis.blog.51cto.com/11907152/1852083&quot;&gt;Apache, Tomcat, Nginx的区别&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Apache 和 Nginx 都叫做 [&lt;em&gt;HTTP Server&lt;/em&gt;]，Tomcat这一类的则是 [&lt;em&gt;Application Server&lt;/em&gt;]。&lt;/p&gt;

&lt;p&gt;Nginx 相对于Apache而言，具有&lt;/p&gt;

&lt;h4 id=&quot;安装-1&quot;&gt;安装&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;yum install nginx
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;&amp;gt;&lt;/strong&gt; 启动 Nginx 。注意，Apache和Nginx默认都是监听的80端口，所以注意端口占用，要么修改默认的端口。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# nginx
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&amp;gt;&lt;/strong&gt; 停止nginx&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;nginx -s stop
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;&amp;gt;&lt;/strong&gt; 重启nginx&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# nginx -s reload
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;nginx 相关配置文件路径 ：&lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/nginx/nginx.conf&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;r---redis&quot;&gt;R - Redis&lt;/h2&gt;

&lt;p&gt;Redis是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&amp;gt;&lt;/strong&gt; 安装&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;yum install -y redis
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;&amp;gt;&lt;/strong&gt; 启动&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;systemctl start redis
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;&amp;gt;&lt;/strong&gt; 开机启动&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;systemctl enable redis
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;&amp;gt;&lt;/strong&gt; 停止&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;systemctl stop redis
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;f---ftp&quot;&gt;F - FTP&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;vsftpd&lt;/strong&gt; 是Linux 下比较著名的FTP服务器。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&amp;gt;&lt;/strong&gt;安装&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;yum -y install vsftpd
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;&amp;gt;&lt;/strong&gt;相关操作&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# systemctl start vsftpd     # 启动 vsftpd
# systemctl enable vsftpd		# 设置开机启动
# systemctl stop vsftpd		# 停止 vsftpd
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;修改配置文件&quot;&gt;修改配置文件&lt;/h4&gt;

&lt;p&gt;打开 &lt;strong&gt;/etc/vsftpd/vsftpd.conf&lt;/strong&gt;，修改配置：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;anonymous_enable=NO 	#设定不允许匿名访问
local_enable=YES 			#设定本地用户可以访问。注：如使用虚拟宿主用户，在该项目设定为NO的情况下所有虚拟用户将无法访问
ascii_upload_enable=YES
ascii_download_enable=YES #设定支持ASCII模式的上传和下载功能
chroot_list_enable=YES 	#使用户不能离开主目录
pam_service_name=vsftpd   #PAM认证文件名。PAM将根据/etc/pam.d/vsftpd进行认证
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;以下这些是关于vsftpd虚拟用户支持的重要配置项，默认vsftpd.conf中不包含这些设定项目，需要自己手动添加&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;guest_enable=YES			#设定启用虚拟用户功能
guest_username=ftp		#指定虚拟用户的宿主用户，CentOS中已经有内置的ftp用户了
user_config_dir=/etc/vsftpd/vuser_conf #设定虚拟用户个人vsftp的CentOS FTP服务文件存放路径。存放虚拟用户个性的CentOS FTP服务文件(配置文件名=虚拟用户名
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;添加用户&quot;&gt;添加用户&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;useradd vicnent 	# 添加一个用户
passwd vincent		# 给用户设置密码
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在 &lt;code class=&quot;highlighter-rouge&quot;&gt;/home&lt;/code&gt; 路径下，就会多出一个 &lt;strong&gt;vincent&lt;/strong&gt; 的文件夹。&lt;/p&gt;

&lt;p&gt;然后就可以在其他电脑上通过FileZilla这类的FTP软件进行上传下载文件了。但是要注意文件的权限。&lt;/p&gt;

</description>
        <pubDate>Fri, 31 Mar 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/03/31/centos-lamp/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/03/31/centos-lamp/</guid>
        
        <category>Web服务器</category>
        
        
      </item>
    
      <item>
        <title>Web服务器压力测试工具 - webbench,Siege</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;Webbench是有名的网站压力测试工具，它是由 Lionbridge公司开发。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;因为之前公司网站的服务器各种拒绝连接，想要测试一下网站的QPS(每秒查询率)，看下大概能到多少并发，于是找到这个工具。但是结果果然超乎想象，2333…&lt;/p&gt;

&lt;h2 id=&quot;webbench&quot;&gt;Webbench&lt;/h2&gt;

&lt;p&gt;webbench是有名的网站压力测试工具，最多可以模拟3万个并发连接去测试网站的负载能力。&lt;/p&gt;

&lt;p&gt;webbench能测试处在相同硬件上，不同服务的性能以及不同硬件上同一个服务的运行状况。&lt;/p&gt;

&lt;p&gt;webbench的标准测试可以向我们展示服务器的两项内容：每秒钟相应请求数和每秒钟传输数据量。&lt;/p&gt;

&lt;h4 id=&quot;mac安装&quot;&gt;MAC安装&lt;/h4&gt;

&lt;p&gt;在Mac环境下，通过&lt;code class=&quot;highlighter-rouge&quot;&gt;brew&lt;/code&gt;进行安装&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;brew install ctags # 依赖安装

wget http://blog.zyan.cc/soft/linux/webbench/webbench-1.5.tar.gz

tar -zxvf webbench-1.5.tar.gz

cd webbench-1.5

sudo mkdir -pv /usr/local/man/man1 # 创建文件夹

sudo make &amp;amp;&amp;amp; sudo make install # 安装

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;使用&quot;&gt;使用&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;webbench -c 100 -t 30 [URL]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;参数说明：&lt;code class=&quot;highlighter-rouge&quot;&gt;-c&lt;/code&gt;表示并发数，&lt;code class=&quot;highlighter-rouge&quot;&gt;-t&lt;/code&gt;表示时间(秒)&lt;/p&gt;

&lt;h4 id=&quot;相关命令&quot;&gt;相关命令&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
webbench [option]... URL

  -f|--force               压测时不等待服务端返回
  -r|--reload              Send reload request - Pragma: no-cache.
  -t|--time &amp;lt;sec&amp;gt;          压测时间/s, 默认30/s
  -p|--proxy &amp;lt;server:port&amp;gt; 使用代理来进行请求
  -c|--clients &amp;lt;n&amp;gt;         并发数量默认1个
  -9|--http09              使用HTTP/0.9 协议请求
  -1|--http10              使用HTTP/1.0 协议请求
  -2|--http11              使用HTTP/1.1 协议请求
  --get                    使用GET方式请求
  --head                   使用 HEAD 方式请求
  --options                Use OPTIONS request method.
  --trace                  Use TRACE request method.
  -?|-h|--help             This information.
  -V|--version             显示当前版本

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;使用结果&quot;&gt;使用结果&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/img/p-web-test-tool/webbench-result.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;貌似只有 0 failed 访问才不会有太大影响。其他或多或少都会有影响。 神经病的马赛克。~&lt;/p&gt;

&lt;h2 id=&quot;siege&quot;&gt;Siege&lt;/h2&gt;

&lt;p&gt;一款开源的压力测试工具，可以根据配置对一个WEB站点进行多用户的并发访问，记录每个用户所有请求过程的相应时间，并在一定数量的并发访问下重复进行。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;最新版本：&lt;a href=&quot;http://download.joedog.org/siege/siege-latest.tar.gz&quot;&gt;http://download.joedog.org/siege/siege-latest.tar.gz&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;源代码：&lt;a href=&quot;https://github.com/JoeDog/siege.git&quot;&gt;https://github.com/JoeDog/siege.git&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;mac-安装&quot;&gt;mac 安装&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# wget http://download.joedog.org/siege/siege-latest.tar.gz
# tar -zxvf siege-latest.tar.gz
# cd siege-latest/
# ./configure
# make &amp;amp;&amp;amp; make install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;相关命令-1&quot;&gt;相关命令&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-V, --version             VERSION, prints the version number.
  -h, --help                HELP, prints this section.
  -C, --config              CONFIGURATION, show the current config.
  -v, --verbose             VERBOSE, prints notification to screen.
  -q, --quiet               QUIET turns verbose off and suppresses output.
  -g, --get                 GET, pull down HTTP headers and display the
                            transaction. Great for application debugging.
  -c, --concurrent=NUM      CONCURRENT users, default is 10
  -i, --internet            INTERNET user simulation, hits URLs randomly.
  -b, --benchmark           BENCHMARK: no delays between requests.
  -t, --time=NUMm           TIMED testing where &quot;m&quot; is modifier S, M, or H
                            ex: --time=1H, one hour test.
  -r, --reps=NUM            REPS, number of times to run the test.
  -f, --file=FILE           FILE, select a specific URLS FILE.
  -R, --rc=FILE             RC, specify an siegerc file
  -l, --log[=FILE]          LOG to FILE. If FILE is not specified, the
                            default is used: PREFIX/var/siege.log
  -m, --mark=&quot;text&quot;         MARK, mark the log file with a string.
  -d, --delay=NUM           Time DELAY, random delay before each requst
                            between .001 and NUM. (NOT COUNTED IN STATS)
  -H, --header=&quot;text&quot;       Add a header to request (can be many)
  -A, --user-agent=&quot;text&quot;   Sets User-Agent in request
  -T, --content-type=&quot;text&quot; Sets Content-Type in request
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;使用-1&quot;&gt;使用&lt;/h4&gt;

&lt;p&gt;100个并发访问 &lt;code class=&quot;highlighter-rouge&quot;&gt;http://www.baidu.com&lt;/code&gt;，并重复20次&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;siege -c 100 -r 20 http://www.baidu.com
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在 urls.txt 中列出所有网址&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;siege -c 100 -r 20 -f urls.txt  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;随机选取 urls.txt 中列出的网址&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;siege -c 100 -r 20 -f urls.txt -i
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;不等待返回结果,100个并发随机选取urls.txt重复请求20个&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;siege -c 2000 -r 100 -f urls.txt -i -b  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;»&lt;/strong&gt; 指定 http 请求头请求&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;siege -H &quot;Content-Type:application/json&quot; -c 100 -r 20 -f urls.txt -i -b  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;»&lt;/strong&gt; POST 请求&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;siege -c 100 -r 20 http://www.baidu.com/ POST p1=v1&amp;amp;p2=v2  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;siege-输出结果说明&quot;&gt;Siege 输出结果说明&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/img/p-web-test-tool/siege-result.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Transactions&lt;/td&gt;
      &lt;td&gt;总共测试次数&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Availability&lt;/td&gt;
      &lt;td&gt;成功次数百分比&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Elapsed time&lt;/td&gt;
      &lt;td&gt;总共耗时多少秒&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Data transferred&lt;/td&gt;
      &lt;td&gt;总共数据传输&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Response time&lt;/td&gt;
      &lt;td&gt;等到响应耗时&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Transaction rate&lt;/td&gt;
      &lt;td&gt;平均每秒处理请求数&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Throughput&lt;/td&gt;
      &lt;td&gt;吞吐率&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Concurrency&lt;/td&gt;
      &lt;td&gt;最高并发&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Successful transactions&lt;/td&gt;
      &lt;td&gt;成功的请求数&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Failed transactions&lt;/td&gt;
      &lt;td&gt;失败的请求数&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;end&quot;&gt;END&lt;/h2&gt;

&lt;p&gt;性能测试工具目前最常见的有以下几种：&lt;code class=&quot;highlighter-rouge&quot;&gt;ab&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;webbench&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;http_load&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;siege&lt;/code&gt;，后面有用到再来试试。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.open-open.com/news/view/d6dff4&quot;&gt;Webbench 一款 Linux 下的压力测试工具 for Mac&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.skyf.org/webbench-web-test-tools/&quot;&gt;记录：Web服务器压力测试工具WebBench、Siege&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Tue, 28 Mar 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/03/28/web-pressure-test/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/03/28/web-pressure-test/</guid>
        
        <category>Web服务器</category>
        
        
      </item>
    
      <item>
        <title>阿里云DNS动态解析</title>
        <description>&lt;p&gt;想要通过域名直接访问路由器的公网IP，但是路由器的外网IP不是固定的，每次重启路由器都会改变。于是想要实现阿里云的DDNS(动态解析)。&lt;/p&gt;

&lt;p&gt;好在阿里云提供了 SDK 可供我们使用，这里使用python来操作。&lt;a href=&quot;https://develop.aliyun.com/sdk/python?spm=5176.7926450.210367.2.Xov5Bp&quot;&gt;python-sdk&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;准备&quot;&gt;准备&lt;/h2&gt;

&lt;h4 id=&quot;安装-python-sdk&quot;&gt;安装 python sdk&lt;/h4&gt;
&lt;p&gt;首先需要在当前机器上安装阿里云的 python SDK&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pip install aliyun-python-sdk-alidns
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;因为这里只需要使用它的 dns 功能，需要其他的功能可以查看 &lt;a href=&quot;https://help.aliyun.com/document_detail/30003.html&quot;&gt;阿里云 python-sdk 列表&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;access-key&quot;&gt;Access Key&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;https://ak-console.aliyun.com/#/accesskey&quot;&gt;Access Key管理&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Access Key ID&lt;/li&gt;
  &lt;li&gt;Access Key Secret&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;添加一条域名解析&quot;&gt;添加一条域名解析&lt;/h4&gt;

&lt;p&gt;添加一条A记录，主机记录可以为你的二级域名，例如： &lt;code class=&quot;highlighter-rouge&quot;&gt;xx.vincents.cn&lt;/code&gt;。记录值随便写 &lt;code class=&quot;highlighter-rouge&quot;&gt;8.8.8.8&lt;/code&gt;，因为后面会根据实际的IP进行动态更改。&lt;/p&gt;

&lt;h2 id=&quot;使用阿里云的-python-sdk&quot;&gt;使用阿里云的 python SDK&lt;/h2&gt;

&lt;p&gt;通过脚本更新DNS记录需要几个关键的信息，&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;一级域名（你的域名）&lt;/li&gt;
  &lt;li&gt;主机记录（你的二级域名）&lt;/li&gt;
  &lt;li&gt;记录值 （你的机器的IP地址）&lt;/li&gt;
  &lt;li&gt;记录ID （这条解析记录的ID）&lt;/li&gt;
  &lt;li&gt;记录TTL （这条解析记录的生存时间）&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;获取当前机器的ip&quot;&gt;获取当前机器的IP&lt;/h4&gt;

&lt;p&gt;可以通过访问 &lt;a href=&quot;ip.cn&quot;&gt;ip.cn&lt;/a&gt;这个网站，获取本机的IP。
在终端中输入&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl -s ip.cn
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;结果为：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Vincents-iMac:~ vincent$ curl -s ip.cn
当前 IP：xx.xx.xxx.xxx 来自：重庆市 联通
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;python code:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&quot;&quot;&quot;
通过 ip.cn 获取当前主机的外网IP
&quot;&quot;&quot;
def get_my_publick_ip():
    get_ip_method = os.popen('curl -s ip.cn')
    get_ip_responses = get_ip_method.readlines()[0]
    get_ip_pattern = re.compile(r'\d+\.\d+\.\d+\.\d+')
    get_ip_value = get_ip_pattern.findall(get_ip_responses)
    return get_ip_value
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;获取解析记录id&quot;&gt;获取解析记录ID&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&quot;&quot;&quot;
获取域名的解析信息
&quot;&quot;&quot;
def check_records(dns_domain):
    clt = client.AcsClient(access_key_id, access_key_secret, 'cn-hangzhou')
    request = DescribeDomainRecordsRequest.DescribeDomainRecordsRequest()
    request.set_DomainName(dns_domain)
    request.set_accept_format(rc_format)
    result = clt.do_action(request)
    result = json.JSONDecoder().decode(result)
    return result
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;根据解析记录id查询上一次的记录值&quot;&gt;根据解析记录ID查询上一次的记录值&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&quot;&quot;&quot;
根据域名解析记录ID查询上一次的IP记录
&quot;&quot;&quot;
def get_old_ip(record_id):
    clt = client.AcsClient(access_key_id,access_key_secret,'cn-hangzhou')
    request = DescribeDomainRecordInfoRequest.DescribeDomainRecordInfoRequest()
    request.set_RecordId(record_id)
    request.set_accept_format(rc_format)
    result = clt.do_action(request)
    result = json.JSONDecoder().decode(result)
    result = result['Value']
    return result
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;更新解析记录&quot;&gt;更新解析记录&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&quot;&quot;&quot;
更新阿里云域名解析记录信息
&quot;&quot;&quot;
def update_dns(dns_rr, dns_type, dns_value, dns_record_id, dns_ttl, dns_format):
    clt = client.AcsClient(access_key_id, access_key_secret, 'cn-hangzhou')
    request = UpdateDomainRecordRequest.UpdateDomainRecordRequest()
    request.set_RR(dns_rr)
    request.set_Type(dns_type)
    request.set_Value(dns_value)
    request.set_RecordId(dns_record_id)
    request.set_TTL(dns_ttl)
    request.set_accept_format(dns_format)
    result = clt.do_action(request)
    return result
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;完整脚本&quot;&gt;完整脚本&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# -*- coding: utf-8 -*-&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;json&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;os&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;re&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;datetime&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;aliyunsdkcore&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;aliyunsdkalidns.request.v20150109&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DescribeDomainRecordsRequest&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;aliyunsdkalidns.request.v20150109&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DescribeDomainRecordInfoRequest&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;aliyunsdkalidns.request.v20150109&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UpdateDomainRecordRequest&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 阿里云 Access Key ID&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;access_key_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;xxxxx&quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 阿里云 Access Key Secret&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;access_key_secret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;xxxxxxxx&quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 阿里云 一级域名&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;rc_domain&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'xxx.cn'&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 返回内容格式&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;rc_format&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'json'&lt;/span&gt;

&lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;
获取域名的解析信息
&quot;&quot;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;check_records&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dns_domain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;clt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AcsClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;access_key_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;access_key_secret&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'cn-hangzhou'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DescribeDomainRecordsRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DescribeDomainRecordsRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_DomainName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dns_domain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_accept_format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rc_format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;do_action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;JSONDecoder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;decode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;

&lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;
根据域名解析记录ID查询上一次的IP记录
&quot;&quot;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_old_ip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;record_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;clt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AcsClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;access_key_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;access_key_secret&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'cn-hangzhou'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DescribeDomainRecordInfoRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DescribeDomainRecordInfoRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_RecordId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;record_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_accept_format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rc_format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;do_action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;JSONDecoder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;decode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Value'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;

&lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;
更新阿里云域名解析记录信息
&quot;&quot;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;update_dns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dns_rr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dns_type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dns_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dns_record_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dns_ttl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dns_format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;clt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AcsClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;access_key_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;access_key_secret&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'cn-hangzhou'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UpdateDomainRecordRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UpdateDomainRecordRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_RR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dns_rr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_Type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dns_type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dns_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_RecordId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dns_record_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_TTL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dns_ttl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_accept_format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dns_format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;do_action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;

&lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;
通过 ip.cn 获取当前主机的外网IP
&quot;&quot;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_my_publick_ip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;get_ip_method&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;popen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'curl -s ip.cn'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;get_ip_responses&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_ip_method&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;readlines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;get_ip_pattern&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;re&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;compile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;r'\d+\.\d+\.\d+\.\d+'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;get_ip_value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_ip_pattern&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;findall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_ip_responses&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_ip_value&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;write_to_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new_ip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;time_now&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strftime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Y-&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;m-&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;d &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;H:&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;M:&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;S'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;write_log&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'aliyun_ddns.txt'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'a'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;write_log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time_now&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;' '&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new_ip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'__main__'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# # 之前的解析记录&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;old_ip&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;record_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;dns_records&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;check_records&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rc_domain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;record&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dns_records&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;DomainRecords&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Record&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;record&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'A'&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;record&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;RR&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'q'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;record_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;record&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;RecordId&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;q.vincents.cn recordID is &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;s&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;record_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;record_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;old_ip&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_old_ip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;record_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
               
    &lt;span class=&quot;n&quot;&gt;old_ip&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_old_ip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;record_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# 获取主机当前的IP&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;now_ip&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_my_publick_ip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;now host ip is &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;s, dns ip is &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;s&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now_ip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;old_ip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;old_ip&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;now_ip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;The specified value of parameter Value is the same as old&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;rc_rr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'q'&lt;/span&gt;                 &lt;span class=&quot;c&quot;&gt;# 解析记录&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;rc_type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'a'&lt;/span&gt;               &lt;span class=&quot;c&quot;&gt;# 记录类型, DDNS填写A记录&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;rc_value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;now_ip&lt;/span&gt;           &lt;span class=&quot;c&quot;&gt;# 新的解析记录值&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;rc_record_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;record_id&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;# 记录ID&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;rc_ttl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'1000'&lt;/span&gt;             &lt;span class=&quot;c&quot;&gt;# 解析记录有效生存时间TTL,单位:秒&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;update_dns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rc_rr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rc_type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rc_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rc_record_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rc_ttl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rc_format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;write_to_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now_ip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;crontab-定时运行&quot;&gt;crontab 定时运行&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;crontab -e
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;*/10 * * * * /usr/bin/python aliyun_ddns.py /dev/null 1&amp;gt;/dev/null
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;其中脚本存放路径替换为自己的实际路径&lt;/p&gt;

&lt;h4 id=&quot;-crontab-定时重启服务器&quot;&gt;** crontab 定时重启服务器&lt;/h4&gt;

&lt;p&gt;由于个人使用的服务器配置一般都不高，重启服务器又能释放一些占用的内存。所以在凌晨定时重启服务器还是很有必要的。亲测，自己1G的内存，使用一段时间省了100M左右的内存可以使用，重启后，又变成600M多了。2333…&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;crontab -e
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 凌晨5点重启一次服务器
0 5 * * * /sbin/reboot
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;查看系统重启记录&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;last reboot
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/img/p-aliyun-ddns/reboot_result.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;参考学习&quot;&gt;参考学习&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://enginx.cn/2016/08/22/%E9%80%9A%E8%BF%87python%E5%B0%86%E9%98%BF%E9%87%8C%E4%BA%91dns%E8%A7%A3%E6%9E%90%E4%BD%9C%E4%B8%BAddns%E4%BD%BF%E7%94%A8.html&quot;&gt;通过python将阿里云DNS解析作为DDNS使用&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.v2ex.com/t/249694&quot;&gt;通过阿里云域名动态解析 IP 地址&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
        <pubDate>Mon, 27 Mar 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/03/27/aliyun-ddns/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/03/27/aliyun-ddns/</guid>
        
        <category>Python</category>
        
        
      </item>
    
      <item>
        <title>iOS 多线程和线程锁</title>
        <description>&lt;p&gt;在 &lt;strong&gt;ibireme&lt;/strong&gt; 的 &lt;a href=&quot;https://bestswifter.com/ios-lock/&quot;&gt;不再安全的 OSSpinLock&lt;/a&gt; 一文中，有一张图简单比较了各种所的加锁性能
&lt;img src=&quot;/img/p-ios-lock/lock_benchmark.png&quot; alt=&quot;&quot; /&gt;
下面根据顺序分析每个加锁的实现原理。注意：加解锁速度并不表示锁的效率，只表示加解锁的操作在执行时的复杂度。&lt;/p&gt;

&lt;h2 id=&quot;锁之间的关系&quot;&gt;锁之间的关系&lt;/h2&gt;

&lt;h4 id=&quot;忙等类&quot;&gt;忙等类&lt;/h4&gt;

&lt;p&gt;test_and_set -&amp;gt; OSSpinLock -&amp;gt; os_unfair_lock&lt;/p&gt;

&lt;h4 id=&quot;休眠类&quot;&gt;休眠类&lt;/h4&gt;

&lt;h5 id=&quot;lll_futex_wait---gcd信号量&quot;&gt;lll_futex_wait -&amp;gt; GCD信号量&lt;/h5&gt;

&lt;h5 id=&quot;lll_futex_wait---pthread_mutex&quot;&gt;lll_futex_wait -&amp;gt; pthread_mutex&lt;/h5&gt;
&lt;p&gt;1.加上错误处理 -&amp;gt; NSLock&lt;/p&gt;

&lt;p&gt;2.加上条件判断 -&amp;gt; NSCondition + Value -&amp;gt; NSConditionLock&lt;/p&gt;

&lt;p&gt;3.加上递归特性 -&amp;gt; NSRecursiveLock&lt;/p&gt;

&lt;p&gt;4.加上递归特性、哈希特性 -&amp;gt; @Synchronized(Obj)&lt;/p&gt;

&lt;h2 id=&quot;osspinlock-自旋锁&quot;&gt;OSSpinLock 自旋锁&lt;/h2&gt;

&lt;h4 id=&quot;自旋锁原理&quot;&gt;自旋锁原理&lt;/h4&gt;

&lt;p&gt;自旋锁的实现思路很简单，理论上来说只要定义一个全局变量，用来表示锁的可用情况即可，伪代码如下:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bool lock = false; // 一开始没有锁上，任何线程都可以申请锁  
do {  
    while(lock); // 如果 lock 为 true 就一直死循环，相当于申请锁
    lock = true; // 挂上锁，这样别的线程就无法获得锁
        Critical section  // 临界区
    lock = false; // 相当于释放锁，这样别的线程可以进入临界区
        Reminder section // 不需要锁保护的代码        
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;osspinlock&quot;&gt;OSSpinLock&lt;/h4&gt;

&lt;p&gt;忙等锁，会消耗大量的CPU资源。不适合较长时间的任务，因为会导致其他线程忙等。&lt;/p&gt;

&lt;p&gt;示例代码&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// OSSpinLock
#import &amp;lt;libkern/OSAtomic.h&amp;gt;

// 自旋锁
- (void)testOSSpinLock {
    __block OSSpinLock osLock = OS_SPINLOCK_INIT;
    
    // 线程1
    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_HIGH, 0), ^{
        NSLog(@&quot;线程1 准备上锁&quot;);
        OSSpinLockLock(&amp;amp;osLock);
        NSLog(@&quot;线程1&quot;);
        OSSpinLockUnlock(&amp;amp;osLock);
        NSLog(@&quot;线程1 解锁完成&quot;);
    });
    
    // 线程2
    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_BACKGROUND, 0), ^{
        NSLog(@&quot;线程2 准备上锁&quot;);
        OSSpinLockLock(&amp;amp;osLock);
        NSLog(@&quot;线程2&quot;);
        OSSpinLockUnlock(&amp;amp;osLock);
        NSLog(@&quot;线程2 解锁完成&quot;);
    });
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;参考学习中的连接已经说明 OSSpinLock 其实已经不再安全。主要原因在于&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;当低优先级线程拿到锁时，高优先级线程进入忙等(budy-wait)状态，消耗大量 CPU 时间，从而导致低优先级线程拿不到 CPU 时间，也就无法完成任务并释放锁。这种问题被称为 &lt;code class=&quot;highlighter-rouge&quot;&gt;优先级反转&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;而且，实际上苹果在&lt;code class=&quot;highlighter-rouge&quot;&gt;iOS10&lt;/code&gt;中也不再推荐使用 OSSpinLock,转而使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;os_unfair_lock()&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;os_unfair_lock&quot;&gt;os_unfair_lock&lt;/h2&gt;

&lt;p&gt;iOS 10.+ 之后添加的，也是属于忙等锁。&lt;/p&gt;

&lt;p&gt;示例代码&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// os_unfair_lock
#import &amp;lt;os/lock.h&amp;gt;

os_unfair_lock_t unfairlock = &amp;amp;(OS_UNFAIR_LOCK_INIT);

os_unfair_lock_lock(unfairlock);
NSLog(@&quot;os_unfair_lock 执行&quot;);
os_unfair_lock_unlock(unfairlock);

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;dispatch_semaphore-gcd信号量&quot;&gt;dispatch_semaphore GCD信号量&lt;/h2&gt;

&lt;p&gt;加锁时会把信号量的值减一，并判断是否大于零。如果大于零，说明不用等待，立刻执行。在没有等待的情况下，性能比 pthread_mutex 高，但是一旦有等待的情况出现，性能就会急剧下降。其优势在于等待时不会消耗 CPU 资源，会进行线程休眠。&lt;/p&gt;

&lt;p&gt;然而，主动让出时间片(线程休眠)并不总是代表效率高，让出时间片会导致操作系统切换到另一个线程，这类上线文切换一般需要10ms左右，且至少需要两次切换才能切换回本线程。如果小于20ms，忙等就比线程睡眠更加高效了。&lt;/p&gt;

&lt;p&gt;示例代码&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// 信号量
- (void)testDispatch_semaphore {
    dispatch_semaphore_t signal = dispatch_semaphore_create(1);
    dispatch_time_t timeout = dispatch_time(DISPATCH_TIME_NOW, 3.0f * NSEC_PER_SEC);
    // DISPATCH_TIME_FOREVER 不限时
    
    // 线程1
    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
        NSLog(@&quot;线程1 等待ing&quot;);
        dispatch_semaphore_wait(signal, timeout);   // signal 值 - 1
        sleep(2);
        NSLog(@&quot;线程1&quot;);
        dispatch_semaphore_signal(signal);          // signal 值 + 1
        NSLog(@&quot;线程1 发送信号&quot;);
    });
    
    // 线程2
    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
        NSLog(@&quot;线程2 等待ing&quot;);
        dispatch_semaphore_wait(signal, timeout);   // signal 值 - 1
        NSLog(@&quot;线程2 sleep&quot;);
        sleep(2);
        NSLog(@&quot;线程2&quot;);
        dispatch_semaphore_signal(signal);          // signal 值 + 1
        NSLog(@&quot;线程2 发送信号&quot;);
    });
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;pthread_mutex--互斥锁&quot;&gt;pthread_mutex  互斥锁&lt;/h2&gt;

&lt;p&gt;pthread 表示 POSIX thread，定义了一组跨平台的线程相关的API，pthread_mutex 表示互斥锁。互斥锁的实现原理与信号量非常相似，不是使用忙等，而是阻塞线程并睡眠，需要进行上线文切换。&lt;/p&gt;

&lt;p&gt;示例代码&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// pthread
#import &amp;lt;pthread.h&amp;gt;

// pthread_mutex 互斥锁
- (void)testPthread_mutex {
    static pthread_mutex_t pLock;
    pthread_mutex_init(&amp;amp;pLock, NULL);
    
    // 线程1
    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
        NSLog(@&quot;线程1 准备上锁&quot;);
        pthread_mutex_lock(&amp;amp;pLock);
        NSLog(@&quot;线程1&quot;);
        sleep(3);
        pthread_mutex_unlock(&amp;amp;pLock);
        NSLog(@&quot;线程1 释放锁&quot;);
    });
    
    // 线程2
    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_HIGH, 0), ^{
        NSLog(@&quot;线程2 准备上锁&quot;);
        pthread_mutex_lock(&amp;amp;pLock);
        NSLog(@&quot;线程2&quot;);
        pthread_mutex_unlock(&amp;amp;pLock);
        NSLog(@&quot;线程2 释放锁&quot;);
    });
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;\/&lt;/strong&gt; 一般情况下，一个线程只能申请一次锁，也只能在获得锁的情况下才能释放锁，多次申请锁或者释放未获得的锁都会导致崩溃。假设在已经获得锁的情况下再次申请锁，线程会因为等待锁的释放而进入睡眠状态，因此就不可能再释放锁，从而导致死锁。&lt;/p&gt;

&lt;p&gt;然而这种情况会经常发生，比如某个函数申请了锁，在临界区内又递归调用了自己。幸运的是 &lt;code class=&quot;highlighter-rouge&quot;&gt;pthread_mutex&lt;/code&gt; 支持递归锁，也就是允许一个线程递归的申请锁。&lt;/p&gt;

&lt;h4 id=&quot;pthread_mutex-递归锁&quot;&gt;pthread_mutex 递归锁&lt;/h4&gt;

&lt;p&gt;示例代码&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// pthread_mutex 递归锁
- (void)testPthread_mutex_recursive {
    static pthread_mutex_t pLock;
    // 定义锁的属性
    pthread_mutexattr_t attr;
    pthread_mutexattr_init(&amp;amp;attr);
    pthread_mutexattr_settype(&amp;amp;attr, PTHREAD_MUTEX_RECURSIVE); // 设置为递归锁
    
    pthread_mutex_init(&amp;amp;pLock, &amp;amp;attr);
    pthread_mutexattr_destroy(&amp;amp;attr);
    
    // 线程1
    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
        static void (^RecursiveBlock)(int);
        RecursiveBlock = ^(int value) {
            pthread_mutex_lock(&amp;amp;pLock);
            if (value &amp;gt; 0) {
                NSLog(@&quot;value: %d&quot;, value);
                sleep(1);
                RecursiveBlock(value - 1);
            }
        };
        
        NSLog(@&quot;线程1 准备上锁&quot;);
        RecursiveBlock(5);
        NSLog(@&quot;线程1&quot;);
        pthread_mutex_unlock(&amp;amp;pLock);
        NSLog(@&quot;线程1 解锁&quot;);
    });
    
    // 线程2
    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
        NSLog(@&quot;线程2 准备上锁&quot;);
        pthread_mutex_lock(&amp;amp;pLock);
        NSLog(@&quot;线程2&quot;);
        pthread_mutex_unlock(&amp;amp;pLock);
        NSLog(@&quot;线程2 解锁&quot;);
    });
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;递归锁比较安全，可以认为同一线程加且仅加一次锁，重复加锁不会造成死锁。无论同一线程加锁多少次，解锁1次即可。&lt;/p&gt;

&lt;h4 id=&quot;互斥锁的实现&quot;&gt;互斥锁的实现&lt;/h4&gt;

&lt;p&gt;互斥锁在申请锁时，调用了&lt;code class=&quot;highlighter-rouge&quot;&gt;pthread_mutex_lock&lt;/code&gt;方法，它在不同的系统上实现各有不同，有时候它的内部是使用信号量来实现，即使不用信号量，也会调用到&lt;code class=&quot;highlighter-rouge&quot;&gt;lll_futex_wait&lt;/code&gt;函数，从而导致线程休眠。&lt;/p&gt;

&lt;p&gt;上面提到说，如果线程等待的临界区很短，忙等的效率也许更高，所以在有些版本的实现中，会首先尝试一定次数(比如1000次)的test and set，这样可以在错误使用互斥锁时提高性能。&lt;/p&gt;

&lt;p&gt;另外，由于 &lt;code class=&quot;highlighter-rouge&quot;&gt;pthread_mutex&lt;/code&gt;有多种类型，可以支持递归锁等，因此在申请加锁时，需要对锁的类型加以判断，这也就是为什么它和信号量的实现类似，但效率略低的原因。&lt;/p&gt;

&lt;h2 id=&quot;nslock-和-nsrecursivelock&quot;&gt;NSLock 和 NSRecursiveLock&lt;/h2&gt;

&lt;p&gt;NSLock /NSRecursiveLock  是 Objective-c 以对象的形式暴露给开发者的一种锁。&lt;/p&gt;

&lt;p&gt;示例代码&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// NSLock
- (void)testNSLock {
    NSLock *lock = [NSLock new];
    [lock lock];
    NSLog(@&quot;加锁运行&quot;);
    [lock unlock];
    
    NSRecursiveLock *recursiveLock = [NSRecursiveLock new];
    [recursiveLock lock];
    NSLog(@&quot;加锁运行&quot;);
    [recursiveLock unlock];
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这里的 NSLock 和 NSRecursiveLock 都是封装的互斥锁 &lt;code class=&quot;highlighter-rouge&quot;&gt;pthread_mutex&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;NSLock 只是在内部封装了一个 pthread_mutex，属性为 &lt;code class=&quot;highlighter-rouge&quot;&gt;PTHREAD_MUTEX_ERRORCHECK&lt;/code&gt;，他会损失一定的性能换来错误提示。理论上来说，NSLock 和 pthread_mutex 拥有相同的运行效率，实际由于封装的原因会略慢一点。由于有缓存存在，相差不会很多。&lt;/p&gt;

&lt;p&gt;NSRecursiveLock 与 NSLock 的区别在于内部封装的 pthread_mutex_t 对象的类型不同，NSRecursiveLock 的类型为 PTHREAD_MUTEX_RECURSIVE。&lt;/p&gt;

&lt;h2 id=&quot;nscondition&quot;&gt;NSCondition&lt;/h2&gt;

&lt;p&gt;它通常用于表明共享资源是佛偶可被访问或者确保一系列任务能按照指定的执行顺序执行。如果一个线程视图访问一个共享资源，而正在访问该资源的线程将其条件设置为不可访问，那么该线程会被阻塞，知道正在访问该资源的线程将访问条件更改为可访问状态或者说给被阻塞的线程发送信号后，被阻塞的线程才能正常访问这个资源。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;NSCondition&lt;/code&gt; 的底层是通过条件变量(condition variable) &lt;code class=&quot;highlighter-rouge&quot;&gt;pthread_cond_t&lt;/code&gt; 来实现的。条件变量有点像信号量，提供了线程阻塞与信号机制，隐藏可以用来阻塞某个线程，并等待某个数据就绪，随后唤醒线程。比如常见的  生产者–消费者模式。&lt;/p&gt;

&lt;h4 id=&quot;nsconditionlock&quot;&gt;NSConditionLock&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;NSConditionLock&lt;/code&gt; 借助 &lt;code class=&quot;highlighter-rouge&quot;&gt;NSCondition&lt;/code&gt; 来实现，它的本质就是个【生产者–消费者】模型。’条件被满足’可以理解为生产者提供了新的内容。&lt;code class=&quot;highlighter-rouge&quot;&gt;NSConditionLock&lt;/code&gt; 的内部持有一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;NSCondition&lt;/code&gt; 对象，以及 &lt;code class=&quot;highlighter-rouge&quot;&gt;_condition_value&lt;/code&gt; 属性。&lt;/p&gt;

&lt;p&gt;示例代码&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// NSConditionLock
- (void)testNSConditionLock {
    NSConditionLock *cLock = [[NSConditionLock alloc] initWithCondition:0];
    
    // 线程1
    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
        NSLog(@&quot;线程1 加锁&quot;);
        [cLock lockWhenCondition:1];
        NSLog(@&quot;线程1&quot;);
        [cLock unlockWithCondition:3];
        NSLog(@&quot;线程1 解锁&quot;);
    });
    
    // 线程2
    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_LOW, 0), ^{
        NSLog(@&quot;线程2 加锁&quot;);
        if ([cLock tryLockWhenCondition:0]) {
            NSLog(@&quot;线程2&quot;);
            [cLock unlockWithCondition:1];
            NSLog(@&quot;线程2 解锁&quot;);
        } else {
            NSLog(@&quot;失败&quot;);
        }
    });
    
    // 线程3
    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_HIGH, 0), ^{
        NSLog(@&quot;线程3 加锁&quot;);
        [cLock lockWhenCondition:3];
        NSLog(@&quot;线程3&quot;);
        [cLock unlockWithCondition:2];
        NSLog(@&quot;线程3 解锁&quot;);
    });
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;上述代码会按照：线程2 &amp;gt; 线程1 &amp;gt; 线程3 的顺序执行。&lt;/p&gt;

&lt;h2 id=&quot;synchronized&quot;&gt;@synchronized&lt;/h2&gt;

&lt;p&gt;示例代码&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@synchronized (self) {
   NSLog(@&quot;加锁运行&quot;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;只要关键字中的对象一致，则多个线程会互斥等待程序运行完成。&lt;/p&gt;

&lt;p&gt;@synchronized 实际上是把修饰对象当做锁来使用。这是通过一个哈希表来实现的，OC在底层使用了一个互斥锁的数组（可以理解为锁池），通过对对象去哈希值来得到对应的互斥锁。&lt;/p&gt;

&lt;h2 id=&quot;一些多线程的基础知识&quot;&gt;一些多线程的基础知识&lt;/h2&gt;

&lt;h4 id=&quot;时间片轮转调度算法&quot;&gt;时间片轮转调度算法&lt;/h4&gt;

&lt;p&gt;了解多线程加锁必须知道时间片轮转调度算法，才能深切理解其原理，性能瓶颈。&lt;/p&gt;

&lt;p&gt;现代操作系统在管理普通线程时，通常采用时间片轮转算法（Round Robin，简称RR）。每个线程会被分配一段时间片（quantum），通常在10-100毫秒左右。当线程用于属于自己的时间片以后，就会被系统挂起，放入等待队列中，知道下一次被分配时间片，如果线程在时间片结束前阻塞或者结束，则CPU当即进行切换。由于线程切换需要时间，如果时间片太短，会导致大量CPU时间浪费在切换上；而如果这个时间太长，会使得其他线程等待太久。&lt;/p&gt;

&lt;h4 id=&quot;原子操作&quot;&gt;原子操作&lt;/h4&gt;

&lt;p&gt;狭义上的原子操作表示一条不可打断的操作，也就是说线程在执行操作过程中，不会被操作系统挂起，而是一定会执行完（理论上拥有CPU时间片无限长）。在单处理器环境下，一条汇编指令显然是原子操作，因为中断也要通过指令来实现，但一句高级语言的代码却不是原子的，因为它最终是由多条汇编语言完成，CPU在进行时间片切换时，大多都会在某条代码的执行过程中。
但在多核处理器下，则需要硬件支持，没了解过具体实现。&lt;/p&gt;

&lt;h4 id=&quot;自旋锁和互斥锁&quot;&gt;自旋锁和互斥锁&lt;/h4&gt;

&lt;p&gt;都属于CPU时间片算法下的实现保护共享资源的一种机制。都实现互斥操作，加锁后仅允许一个访问者。&lt;/p&gt;

&lt;p&gt;区别在于自旋锁不会是线程进入wait状态，而是通过轮询不停查看是否该自旋锁的持有者已经释放的锁；对应的，互斥锁在出现锁已经被占用的情况下会进入wait状态，CPU会当即切换时间片。&lt;/p&gt;

&lt;h4 id=&quot;自旋锁实现原理&quot;&gt;自旋锁实现原理&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;lock = 0;
do{
    while(test_and_set(&amp;amp;lock));
    临界区
    lock = 0;
    其余部分
} while(1)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;test_and_set用来保证条件判断的原子性操作，lock为旗标。
自旋锁的一大缺陷是会使得线程处于忙等状态。因为如果临界区执行时间过长，其它线程就会在当前整个时间片一直处于忙等状态，浪费大量CPU时间。所以，如果临界区时间很短，可以使用自旋锁，否则建议使用互斥锁。&lt;/p&gt;

&lt;h4 id=&quot;互斥锁的实现原理&quot;&gt;互斥锁的实现原理&lt;/h4&gt;

&lt;p&gt;互斥锁在出现锁的争夺时，未获得锁的线程会主动让出时间片，阻塞线程并睡眠，需要进行上下文切换，CPU会切换其它线程继续操作。
主动让出时间片并不总是代表效率高。让出时间片会导致操作系统切换到另一个线程，这种上下文切换通常需要 10 微秒左右，而且至少需要两次切换。如果等待时间很短，比如只有几个微秒，忙等就比线程睡眠更高效。&lt;/p&gt;

&lt;h4 id=&quot;信号量的实现&quot;&gt;信号量的实现&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;int sem_wait (sem_t *sem) {  
  int *futex = (int *) sem;
  if (atomic_decrement_if_positive (futex) &amp;gt; 0)
    return 0;
  int err = lll_futex_wait (futex, 0);
    return -1;
)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;信号量和互斥锁类似，都是在获取锁失败后线程进入wait状态，CPU会切换时间片。
信号量在最终都是调用一个sem_wait方法，并原子性的判断信号量，如果对其-1后依然大于0，则直接返回，继续临界区操作，否则进入等待状态。&lt;/p&gt;

&lt;h2 id=&quot;多线程中的常见术语名词&quot;&gt;多线程中的常见术语名词&lt;/h2&gt;

&lt;h6 id=&quot;互斥锁mutex&quot;&gt;互斥锁(mutex)&lt;/h6&gt;

&lt;p&gt;提供共享资源互斥访问的锁。一个互斥锁同一时间只能被一个线程拥有。视图获取一个已经被其他线程拥有的互斥锁，会把当前线程置于休眠状态，直到该锁被其他线程释放并让当前线程获取。&lt;/p&gt;

&lt;p&gt;####### 递归锁(recursive lock)&lt;/p&gt;

&lt;p&gt;可以被同一线程多次锁住的锁。&lt;/p&gt;

&lt;h6 id=&quot;信号量semaphore&quot;&gt;信号量(semaphore)&lt;/h6&gt;

&lt;p&gt;一个受保护的变量，它限制共享资源的访问。互斥锁(mutexes)和条件(conditions)都是不同类型的信号量。&lt;/p&gt;

&lt;h6 id=&quot;条件condition&quot;&gt;条件(condition)&lt;/h6&gt;

&lt;p&gt;一个用来同步资源访问的结构。线程等待某一个条件来决定是否被允许继续运行，知道其他线程显示的给该条件发送信号&lt;/p&gt;

&lt;h6 id=&quot;临界区critical-section&quot;&gt;临界区(critical section)&lt;/h6&gt;

&lt;p&gt;同一时间只能不被一个线程执行的代码。&lt;/p&gt;

&lt;h6 id=&quot;输入源input-source&quot;&gt;输入源(input source)&lt;/h6&gt;

&lt;p&gt;一个线程的异步事件源。输入源可以是基于端口的或者手工触发，并且必须被附加到某一个线程的run loop上面。&lt;/p&gt;

&lt;h6 id=&quot;线程thread&quot;&gt;线程(thread)&lt;/h6&gt;

&lt;p&gt;进程里面的一个执行过程流。每个线程都有它自己的栈空间，但除此之外同一进程的其他线程共享内存。&lt;/p&gt;

&lt;h6 id=&quot;主线程main-thread&quot;&gt;主线程(main thread)&lt;/h6&gt;

&lt;p&gt;当创建进程时一起创建的特定类型的线程。当程序的主线程退出，则程序即退出。&lt;/p&gt;

&lt;h6 id=&quot;可连接的线程join-thread&quot;&gt;可连接的线程(join thread)&lt;/h6&gt;

&lt;p&gt;退出时资源不会被立即回收的线程。可连接的线程在资源被回收之前必须被显示脱离或由其他线程连接。可连接线程提供了一个返回值给连接它的线程。&lt;/p&gt;

&lt;h6 id=&quot;操作对象operation-object&quot;&gt;操作对象(operation object)&lt;/h6&gt;

&lt;p&gt;NSOperation 类的示例。操作对象封装了和某一任务相关的代码到一个执行单元里面。&lt;/p&gt;

&lt;h6 id=&quot;操作队列operation-queue&quot;&gt;操作队列(operation queue)&lt;/h6&gt;

&lt;p&gt;NSOperationQueue 类的示例。操作队列管理操作对象的执行。&lt;/p&gt;

&lt;h2 id=&quot;参考学习链接&quot;&gt;参考学习链接&lt;/h2&gt;

&lt;blockquote&gt;

  &lt;ol&gt;
    &lt;li&gt;&lt;a href=&quot;http://www.chaisong.xyz/2017/02/06/2017-02-06/&quot;&gt;【iOS】从同步锁到多线程&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;http://blog.ibireme.com/2016/01/16/spinlock_is_unsafe_in_ios/&quot;&gt;深入理解iOS开发中的锁&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://bestswifter.com/ios-lock/&quot;&gt;不再安全的 OSSpinLock&lt;/a&gt;&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

</description>
        <pubDate>Tue, 14 Mar 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/03/14/ios-lock/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/03/14/ios-lock/</guid>
        
        <category>iOS</category>
        
        
      </item>
    
  </channel>
</rss>
