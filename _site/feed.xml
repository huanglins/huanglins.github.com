<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>tnecniV</title>
    <description>// iOS Developer，也写Android和Python。正在学习全栈。很高兴认识你。</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Wed, 31 Oct 2018 09:39:16 +0800</pubDate>
    <lastBuildDate>Wed, 31 Oct 2018 09:39:16 +0800</lastBuildDate>
    <generator>Jekyll v3.8.3</generator>
    
      <item>
        <title>Mysql 主从备份和读写分离实践</title>
        <description>&lt;h2 id=&quot;1-主从备份&quot;&gt;1. 主从备份&lt;/h2&gt;

&lt;h4 id=&quot;11-原理&quot;&gt;1.1 原理&lt;/h4&gt;
&lt;p&gt;mysql支持单向、异步复制，复制过程中一个服务器充当主服务器，而一个或多个其它服务器充当从服务器。mysql复制基于主服务器在二进制日志中跟踪所有对数据库的更改(更新、删除等等)。因此，要进行复制，必须在主服务器上启用二进制日志。每个从服务器从主服务器接收主服务器已经记录到其二进制日志的保存的更新。当一个从服务器连接主服务器时，它通知主服务器从服务器在日志中读取的最后一次成功更新的位置。从服务器接收从那时起发生的任何更新，并在本机上执行相同的更新。然后封锁并等待主服务器通知新的更新。从服务器执行备份不会干扰主服务器，在备份过程中主服务器可以继续处理更新。&lt;/p&gt;

&lt;h4 id=&quot;12-支持复制类型&quot;&gt;1.2 支持复制类型&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;基于语句的复制&lt;/strong&gt;：在主服务器上执行的SQL语句，在从服务器上执行同样的语句。MySQL默认采用基于语句的复制，效率比较高。  一旦发现没法精确复制时，会自动选着基于行的复制。
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; binlog_format=Statement
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;基于行的复制&lt;/strong&gt;：把改变的内容复制过去，而不是把命令在从服务器上执行一遍. 从mysql5.0开始支持
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; binlog_format=Row
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;混合类型的复制&lt;/strong&gt;：默认采用基于语句的复制，一旦发现基于语句的无法精确的复制时，就会采用基于行的复制。
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; binlog_format=mixed
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;13-复制解决的问题&quot;&gt;1.3 复制解决的问题&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;数据分布 (Data distribution )&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;负载平衡(load balancing)&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;备份(Backups)&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;高可用性和容错行 High availability and failover&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;14-复制如何工作&quot;&gt;1.4 复制如何工作&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;master 将改变记录到二进制日志(binary log)中（这些记录叫做二进制日志事件，binary log events）&lt;/li&gt;
  &lt;li&gt;slave 将 master 的 binary log events 拷贝到它的中继日志(relay log)&lt;/li&gt;
  &lt;li&gt;slave 重做中继日志中的事件，将改变反映它自己的数据。
&lt;img src=&quot;/img/p-mysql-slave/15408656565076.jpg&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;master 接收到了SQL的时候，会存入到一个 binlog 的文件并入库，binlog 数据存储完毕后会开启一个 dump thread 线程，
这个线程会将 binlog 的数据同步到slave的io thread，io thread将数据存储到delay binlog（中继日志），启动一个sql thread
将数据写入slave的binlog和data中。binlog有个position的字段，和RandomAccessFile中的指针的概念是一样的，会记录上次的位置，这样就可以将binlog的数据从新的position开始同步，不会造成重复。&lt;/p&gt;

&lt;h2 id=&quot;2-主从备份实践&quot;&gt;2. 主从备份实践&lt;/h2&gt;

&lt;h4 id=&quot;21-配置主服务器&quot;&gt;2.1 配置主服务器&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vi /etc/my.conf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;在 &lt;code class=&quot;highlighter-rouge&quot;&gt;[mysqld]&lt;/code&gt; 下面配置以下参数&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 1. 主从备份相关配置
server-id = 1	            # 服务器 id 号，不要和其他服务器重复
log-bin=mysql-bin		    # 开启二进制日志
log_bin_index = mysql-bin.index	    # 索引二进制日志的文件名
sync_binlog = 1			    # 设为1就是把MySql每次发生的修改和事件的日志即时同步到硬盘上
binlog_format = Row		    # 复制模式 Statement, Row, mixed
skip_slave_start = 1	    # 防止从服务器在崩溃后自动开启，以给你足够的时间修复。
max_binlog_size = 200M 	    # 指定二进制日志的大小

# 1.1 需要同步的二进制数据库名
binlog-do-db = test
# 1.2 不同步的二进制数据库名,如果不设置可以将其注释掉
binlog-ignore-db = information_schema
binlog-ignore-db = mysql

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;重启 mysql&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;service mysqld restart
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;查看修改结果&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;show variables like 'server%'; 
show master status; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/img/p-mysql-slave/Screen%20Shot%202018-10-30%20at%2011.06.31%20AM.png&quot; alt=&quot;Screen Shot 2018-10-30 at 11.06.31 A&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;211-重启出现报错&quot;&gt;2.1.1 重启出现报错&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Can’t connect to local MySQL server through socket ‘/var/lib/mysql/mysql.sock’ (2)&lt;/strong&gt;&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; rm -fr /var/lib/mysql/*
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Access denied for user ‘root’@’localhost’ (using password: YES)&lt;/strong&gt;&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &amp;gt; service mysqld stop
 &amp;gt; mysqld_safe --user=mysql --skip-grant-tables --skip-networking &amp;amp;
 &amp;gt; msyql -u root mysql
    
 然后重新设置密码
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;22-配置从服务器&quot;&gt;2.2 配置从服务器&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vi /etc/my.conf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;在 &lt;code class=&quot;highlighter-rouge&quot;&gt;[mysqld]&lt;/code&gt; 下面配置以下参数&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 1. 主从备份相关配置 - 从服务器
# 不在这里配置主服务器信息，而是通过命令来配置
server-id = 2			# 服务器 id 号，不要和其他服务器重复
read_only = 1			# 让从服务器只读，可以防止有人误从服务器插入数据，导致主从数据不一致。 
log-bin=mysql-bin		# 开启二进制日志
log_bin_index = mysql-bin.index	# 索引二进制日志的文件名
log_slave_updates = 1
relay_log = mysql-relay-bin 	# 中继日志 
relay_log_index = mysql-relay-bin.index
skip_slave_start = 1		# 防止从服务器在崩溃后自动开启，以给你足够的时间修复。 
max_binlog_size = 200M 			# 指定二进制日志的大小

# 以下配置是为了方便以后，从库切换为主库
# 1.1 需要同步的二进制数据库名
binlog-do-db = test
# 1.2 不同步的二进制数据库名,如果不设置可以将其注释掉
binlog-ignore-db = information_schema
binlog-ignore-db = mysql
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;22-关联从库的主数据库并开始备份&quot;&gt;2.2 关联从库的主数据库，并开始备份&lt;/h4&gt;

&lt;p&gt;在主数据库中创建专门用于复制的账号：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;GRANT REPLICATION SLAVE ON *.* to 'repl'@'144.%.%.%' identified by '123456';
FLUSH PRIVILEGES;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;这是测试为 ip 地址 144 开头的服务器可以访问，不建议用 &lt;code class=&quot;highlighter-rouge&quot;&gt;%&lt;/code&gt; 测试全部。&lt;/p&gt;

&lt;p&gt;在从数据库中执行命令&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;CHANGE MASTER TO
             MASTER_HOST='master_host_name',
             MASTER_USER='replication_user_name',
             MASTER_PASSWORD='replication_password',
             MASTER_LOG_FILE='recorded_log_file_name',
             MASTER_LOG_POS=recorded_log_position;
             
-------------------------------------------------------
master_host_name        主数据库 ip 地址
replication_user_name   主数据操作账号      repl
replication_password    主数据库操作密码     自己设定
recorded_log_file_name  主数据 show master status; 查看到的 File
recorded_log_position   主数据 show master status; 查看到的 Position
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;开始操作&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;START SLAVE; 

STOP SLAVE;     # 停止
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;查看使用状态&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SHOW SLAVE STATUS;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/img/p-mysql-slave/Screen%20Shot%202018-10-30%20at%202.20.56%20PM.png&quot; alt=&quot;Screen Shot 2018-10-30 at 2.20.56 P&quot; /&gt;&lt;/p&gt;

&lt;p&gt;可以看出当前从服务器已经在等待主服务器的 event 了，此时我们在主数据库的 &lt;code class=&quot;highlighter-rouge&quot;&gt;test&lt;/code&gt; 库操作数据，看下是否已经自动同步过来了。&lt;/p&gt;

&lt;h2 id=&quot;3-读写分离&quot;&gt;3. 读写分离&lt;/h2&gt;
&lt;p&gt;读写分离就是在主服务器上修改，数据会同步到从服务器，从服务器只能提供读取数据，不能写入，实现备份的同时也实现了数据库性能的优化，以及提升了服务器安全。 
&lt;img src=&quot;/img/p-mysql-slave/15408811811696.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;31-读写分离实现方式&quot;&gt;3.1 读写分离实现方式&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;程序修改mysql操作类&lt;/strong&gt;
  优点：直接和数据库通信，简单快捷的读写分离和随机的方式实现的负载均衡，权限独立分配
  缺点：自己维护更新，增减服务器在代码处理&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;amoeba&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;优点：直接实现读写分离和负载均衡，不用修改代码，有很灵活的数据解决方案
  缺点：自己分配账户，和后端数据库权限管理独立，权限处理不够灵活&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;mysql-proxy&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/img/p-mysql-slave/15408909948035.jpg&quot; alt=&quot;&quot; /&gt;
  优点：直接实现读写分离和负载均衡，不用修改代码，master和slave用一样的帐号
  缺点：字符集问题，lua语言编程，还只是alpha版本，时间消耗有点高&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;32-mysql-proxy&quot;&gt;3.2 Mysql-Proxy&lt;/h4&gt;

&lt;p&gt;安装响应依赖库&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;yum -y install gcc* gcc-c++* autoconf* automake* zlib* libxml* ncurses-devel* libmcrypt* libtool* flex* pkgconfig* libevent* glib*
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;33-程序修改&quot;&gt;3.3 程序修改&lt;/h4&gt;

&lt;p&gt;因为每个后台实现方式都不一样，这里后续再进行更新&lt;/p&gt;

&lt;h2 id=&quot;参考链接&quot;&gt;参考链接&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/qmhball/article/details/8233769&quot;&gt;mysql主从备份及原理分析&lt;/a&gt;
&lt;a href=&quot;https://blog.csdn.net/hguisu/article/details/7325124&quot;&gt;高性能Mysql主从架构的复制原理及配置详解&lt;/a&gt;
&lt;a href=&quot;https://blog.csdn.net/Gavid0124/article/details/51692450&quot;&gt;MySQL主从复制（Master-Slave）与读写分离（MySQL-Proxy）实践&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 30 Oct 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/10/30/mysql-slave/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/10/30/mysql-slave/</guid>
        
        <category>MySQL</category>
        
        
      </item>
    
      <item>
        <title>iOS 马甲包、代码混淆、编译混淆实践</title>
        <description>&lt;h2 id=&quot;1-马甲包&quot;&gt;1. 马甲包&lt;/h2&gt;
&lt;h3 id=&quot;11-什么是马甲包&quot;&gt;1.1 什么是马甲包?&lt;/h3&gt;
&lt;p&gt;马甲包是利用 App store 的规则漏洞，通过技术手段，多次上架同一款产品的方法。马甲包和主产品包拥有基本一致的内容和功能，项目代码基本都是完全复用的，除了图标，应用名称，包名等不一致，其他基本一致。&lt;/p&gt;

&lt;h3 id=&quot;12-为什么做马甲包以及马甲包的好处&quot;&gt;1.2 为什么做马甲包，以及马甲包的好处&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;AB 测试&lt;/strong&gt;
  可以测试跨度大的新功能，好的功能就在主包上迭代，不好的也无所谓，不影响主包的使用体验，避免用户流失。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;导流&lt;/strong&gt;
  主包和马甲包同属一个平台，用户信息可以共享；通过弹窗,广告,Push等引导用户到App Store下载主App；有一部份App接了网盟相互导流。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;增加关键词覆盖&lt;/strong&gt;
  App Store关键词长度上限是100个字符,据了解人为正常优化的极限是关键词覆盖数在4000左右,那些覆盖数在8000+的都是利用了苹果漏洞。所以,多做一个马甲,也就意味着覆盖的关键词可以更多。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;刷榜&lt;/strong&gt;
  积分墙、真机、机刷等。用马甲包来刷排名，抵抗主包风险。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;13-马甲包制作注意事项&quot;&gt;1.3 马甲包制作注意事项&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;二进制不同&lt;/strong&gt;
  应用名称，图标，包名，工程名，打包电脑，代码，静态资源等的修改。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;差异化&lt;/strong&gt;
  整体UI，产品功能，页面布局等的修改&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;14-实践&quot;&gt;1.4 实践&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/klaus01/KLGenerateSpamCode&quot;&gt;KLGenerateSpamCode&lt;/a&gt; 是一个应对苹果对重复应用的审核（Guideline 4.3 Design Spam）的工具，用于避免苹果机审检测概率。&lt;/p&gt;

&lt;p&gt;主要功能有：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;修改工程名&lt;/li&gt;
  &lt;li&gt;修改类名前缀&lt;/li&gt;
  &lt;li&gt;扫描工程中的代码，生成同等数量的 Category 文件，文件中及是同等方法数量的垃圾代码。&lt;/li&gt;
  &lt;li&gt;修改 xxx.xcassets 文件夹中的 png 资源文件名。&lt;/li&gt;
  &lt;li&gt;删除代码中的所有注释和空行。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/img/p-ios-hikari/15402030163246.jpg&quot; alt=&quot;-w910&quot; /&gt;&lt;/p&gt;

&lt;p&gt;示例：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 1. 项目名地址，注意不是项目文件夹地址
/Users/vincent/Desktop/code/spamCode/VHLSpamCodeDemo/VHLSpamCodeDemo   
# 2. 修改项目名称
-modifyProjectName VHLSpamCodeDemo&amp;gt;VHLSpamCodeDemo1
# 3. 忽略文件夹
-ignoreDirNames Depends
# 4. 修改类名前缀。没有前缀的会加上前缀，有前缀的会修改。注意修改后是否重名
-modifyClassNamePrefix /Users/vincent/Desktop/code/spamCode/VHLSpamCodeDemo/VHLSpamCodeDemo.xcodeproj VHL&amp;gt;VIN
# 5. 生成垃圾代码
-spamCodeOut /Users/vincent/Desktop/code/spamCode/VHLSpamCodeDemo/VHLSpamCodeDemo2/SpamCode VSpam
# 6. 修改 xxx.xcassets 文件夹中的 png 资源文件名
-handleXcassets
# 7. 删除空行和注释 
-deleteComments
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/img/p-ios-hikari/15402873574819.jpg&quot; alt=&quot;-w1075&quot; /&gt;&lt;/p&gt;

&lt;p&gt;修改工程名后，如果包含 pod，需要到文件夹下重新执行 &lt;code class=&quot;highlighter-rouge&quot;&gt;pod update&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;15-优化图片大小修改图片-hash-值&quot;&gt;1.5 优化图片大小，修改图片 hash 值&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://imageoptim.com/mac&quot;&gt;ImageOptim&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;mac 下无损压缩图片工具，将包含图片的文件夹拖入工具，会自动扫描文件夹下的所有文件，自动选择最优算法进行优化。一般第一次优化项目时，会有几M到10几M的优化效果。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://www.imagemagick.org/script/index.php&quot;&gt;ImageMagick&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;ImageMagick: 是一款创建、编辑、合成，转换图像的命令行工具。&lt;/p&gt;

    &lt;p&gt;通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;brew&lt;/code&gt; 安装 &lt;code class=&quot;highlighter-rouge&quot;&gt;imagemagick&lt;/code&gt;&lt;/p&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  brew install imagemagick
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;压缩文件夹下所有 png 文件，会修改 hash 值&lt;/p&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  find . -iname &quot;*.png&quot; -exec echo {} \; -exec convert {} {} \;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;更多 &lt;code class=&quot;highlighter-rouge&quot;&gt;imagemagick&lt;/code&gt; 命令以及使用方法 
  &lt;a href=&quot;https://aotu.io/notes/2018/06/06/ImageMagick_intro/index.html&quot;&gt;图像处理 - ImageMagick 简单介绍与案例&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;2-逆向基础以及为什么要做混淆&quot;&gt;2. 逆向基础，以及为什么要做混淆&lt;/h2&gt;

&lt;p&gt;当我们用 Xcode 构建一个程序的过程时，编译器会把源文件 (.m 和 .h) 文件转换为一个可执行文件。这个可执行文件中包含的字节码会将被 CPU 执行，虽然不能直接从这些字节码中查看我们的核心代码，但是黑客可以通过一些反汇编的逆向工具来分析我们的程序，找到漏洞进行破解。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;可执行文件格式&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;EXE&lt;/strong&gt;     &lt;code class=&quot;highlighter-rouge&quot;&gt;Windows&lt;/code&gt; 下可直接执行的文件扩展名
&lt;strong&gt;ELF&lt;/strong&gt;     &lt;code class=&quot;highlighter-rouge&quot;&gt;Linux&lt;/code&gt; 下的可执行文件
&lt;strong&gt;Mach-O&lt;/strong&gt;  &lt;code class=&quot;highlighter-rouge&quot;&gt;MacOS/iOS&lt;/code&gt; 下主要的可执行文件&lt;/p&gt;

&lt;h3 id=&quot;21-mach-与-mach-o&quot;&gt;2.1 Mach 与 Mach-O&lt;/h3&gt;

&lt;p&gt;Mac 是苹果电脑 Macintosh 的简称，而 Mach 则是一种操作系统内核。Mach 内核被 NeXT 公司的NeXTSTEP 操作系统使用。在Mach上，一种可执行的文件格是就是 Mach-O（Mach Object file format）。1996年，乔布斯将 NeXTSTEP 带回苹果，成为了OS X的内核基础。所以虽然 MacOS X 是 Unix 的“后代”，但所主要支持的可执行文件格式是 Mach-O。&lt;/p&gt;

&lt;h3 id=&quot;22-ios-可执行文件&quot;&gt;2.2 iOS 可执行文件&lt;/h3&gt;

&lt;p&gt;通常我们通过 Xcode 打包或者从应用商店下载的 APP 都是 &lt;code class=&quot;highlighter-rouge&quot;&gt;ipa&lt;/code&gt; 包（iPhone Application）。这是一个变相的 zip 压缩包，可以通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;unzip&lt;/code&gt; 命令进行解压。&lt;/p&gt;

&lt;p&gt;解压之后，会有一个 Payload 目录，而 Payload 里则是一个 &lt;strong&gt;.app&lt;/strong&gt; 文件，而这个实际上又是一个目录，或者说是一个完整的 App Bundle。&lt;/p&gt;

&lt;p&gt;在这个目录中，里面体积最大的文件通常就是和 ipa 包同名的一个二进制文件。通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;file&lt;/code&gt; 命令可以查看该文件的类型&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;xx: Mach-O universal binary with 2 architectures: [arm_v7:Mach-O executable arm_v7] [arm64]
xx (for architecture armv7):	Mach-O executable arm_v7
xx (for architecture arm64):	Mach-O 64-bit executable arm64
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;这里可以看出，这是一个支持 armv7 和 armv7s 两种处理器架构的通用程序包，里面包含的两部分都是 Mach-O 格式。&lt;/p&gt;

&lt;blockquote&gt;

  &lt;p&gt;&lt;strong&gt;i386&lt;/strong&gt; 模拟器32位处理器
&lt;strong&gt;x86_64&lt;/strong&gt; 模拟器64位处理器
&lt;strong&gt;armv7,armv7s&lt;/strong&gt; 真机32位处理器
&lt;strong&gt;arm64&lt;/strong&gt; 真机64位处理器&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Mach-O 的文件结构：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/p-ios-hikari/15402721412482.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;从这张图上来看，Mach-O文件的数据主体可分为三大部分，分别是头部（Header）、加载命令（Load commands）、和最终的数据（Data）。&lt;/p&gt;

&lt;h3 id=&quot;23-class-dump&quot;&gt;2.3 class-dump&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://stevenygard.com/projects/class-dump/&quot;&gt;class-dump&lt;/a&gt; 是一个利用 Objective-C 语言的 runtime 特性，将存储在 Mach-O 文件结构里 data 部分的类属性和方法等信息提取出来，并生成对应的 .h 文件的工具。&lt;strong&gt;注意: 必须是脱壳后的可执行文件。(比如通过越狱手机或者第三方应用下载渠道)&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&quot;24-安装使用&quot;&gt;2.4 安装使用&lt;/h4&gt;

&lt;p&gt;在 &lt;a href=&quot;http://stevenygard.com/projects/class-dump/&quot;&gt;class-dump&lt;/a&gt; 官网下载 dmg，将 dmg 里面的 &lt;code class=&quot;highlighter-rouge&quot;&gt;class-dump&lt;/code&gt; 拷贝到 &lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/local/bin&lt;/code&gt; 文件夹下，然后就可以在终端中使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;class-dump&lt;/code&gt; 命令了。&lt;/p&gt;

&lt;p&gt;简单使用：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class-dump -H [需要被导出的 Mach-O 文件路径] -o [头文件输出目录地址]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;也可以可以查看导出后的头文件目录：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/p-ios-hikari/15402749967715.jpg&quot; alt=&quot;-w621&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;25-hopper&quot;&gt;2.5 hopper&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://www.hopperapp.com/&quot;&gt;Hopper&lt;/a&gt; 是一种适用于 OS X 和 Linux 的逆向工程工具，可以用于反汇编、反编译和调试 32位/64位英特尔处理器的 Mac、Linux、Windows 和 iOS 可执行程序。&lt;/p&gt;

&lt;p&gt;将 Mach-O 文件拖入 &lt;a href=&quot;https://www.hopperapp.com&quot;&gt;hopper&lt;/a&gt; 可以查看。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/p-ios-hikari/15402820640765.jpg&quot; alt=&quot;-w1425&quot; /&gt;&lt;/p&gt;

&lt;p&gt;通过以上的方式，别人可以对照应用的功能来分析代码逻辑，从而进行针对性的破解。所以对项目的核心的代码进行混淆就是非常有必要的了。&lt;/p&gt;

&lt;h2 id=&quot;3-代码混淆&quot;&gt;3. 代码混淆&lt;/h2&gt;

&lt;p&gt;常规的混淆思路：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;花代码花指令，即随意往程序中加入迷惑人的代码指令&lt;/li&gt;
  &lt;li&gt;易读字符替换&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;防止被 class-dump 后，被人分析核心代码逻辑。可以对关键，已读的字符串进行替换，比如 &lt;code class=&quot;highlighter-rouge&quot;&gt;ad&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;vip&lt;/code&gt; 等关键词。&lt;/p&gt;

&lt;h3 id=&quot;31-替换字符串混淆&quot;&gt;3.1 替换字符串混淆&lt;/h3&gt;

&lt;p&gt;但是我们又不想替换成不想关的字符串后给自己调试带来麻烦，这里我们可以使用 &lt;a href=&quot;https://github.com/housenkui/HSKConfuse&quot;&gt;HSKConfuse&lt;/a&gt; 的 shell 脚本，通过在Build Phrase 中设定在编译之前进行方法名的字符串替换，从而在不影响自己编写代码的基础上，对编译后的二进制包进行混淆。&lt;/p&gt;

&lt;p&gt;首先在项目中新建文件：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;confuse.sh： 存放混淆的脚本
func.list： 需要混淆的方法、变量名
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;confuse.sh&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/usr/bin/env bash&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;TABLENAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;symbols
&lt;span class=&quot;nv&quot;&gt;SYMBOL_DB_FILE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;symbols&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;STRING_SYMBOL_FILE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$PROJECT_DIR&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/VHLObfuscationDemo/VHLObfuscation/func.list&quot;&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;CONFUSE_FILE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$PROJECT_DIR&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/VHLObfuscationDemo&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;HEAD_FILE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$PROJECT_DIR&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/VHLObfuscationDemo/VHLObfuscation/codeObfuscation.h&quot;&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;LC_CTYPE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;C

&lt;span class=&quot;c&quot;&gt;# ** 可以不执行下面的方法，替换成自己的规则手动写入到 func.list 中**&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 取以.m或.h结尾的文件以+号或-号开头的行，并以 vhl_ 开头的方法 |去掉所有+号或－号|用空格代替符号|n个空格跟着&amp;lt;号 替换成 &amp;lt;号|开头不能是IBAction|用空格split字串取第二部分|排序|去重复|删除空行|删掉以init开头的行&amp;gt;写进func.list&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-h&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-I&lt;/span&gt;  &lt;span class=&quot;s2&quot;&gt;&quot;^[-+]&quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$CONFUSE_FILE&lt;/span&gt;  &lt;span class=&quot;nt&quot;&gt;--include&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'*.[mh]'&lt;/span&gt; |sed &lt;span class=&quot;s2&quot;&gt;&quot;s/[+-]//g&quot;&lt;/span&gt;|sed &lt;span class=&quot;s2&quot;&gt;&quot;s/[();,: *&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\^\/\{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;]/ /g&quot;&lt;/span&gt;|sed &lt;span class=&quot;s2&quot;&gt;&quot;s/[ ]*&amp;lt;/&amp;lt;/&quot;&lt;/span&gt;| &lt;span class=&quot;nb&quot;&gt;sed&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/^[ ]*IBAction/d&quot;&lt;/span&gt;|awk &lt;span class=&quot;s1&quot;&gt;'{split($0,b,&quot; &quot;); print b[2]; }'&lt;/span&gt;| &lt;span class=&quot;nb&quot;&gt;sort&lt;/span&gt;|uniq |sed &lt;span class=&quot;s2&quot;&gt;&quot;/^&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$/&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;d&quot;&lt;/span&gt;|sed &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/^vhl_/p&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$STRING_SYMBOL_FILE&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;#维护数据库方便日后作排重,以下代码来自念茜的微博&lt;/span&gt;
createTable&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;create table &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$TABLENAME&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;(src text, des text);&quot;&lt;/span&gt; | sqlite3 &lt;span class=&quot;nv&quot;&gt;$SYMBOL_DB_FILE&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

insertValue&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;insert into &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$TABLENAME&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; values('&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;' ,'&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$2&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;');&quot;&lt;/span&gt; | sqlite3 &lt;span class=&quot;nv&quot;&gt;$SYMBOL_DB_FILE&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

query&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;select * from &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$TABLENAME&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; where src='&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;';&quot;&lt;/span&gt; | sqlite3 &lt;span class=&quot;nv&quot;&gt;$SYMBOL_DB_FILE&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

ramdomString&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
openssl rand &lt;span class=&quot;nt&quot;&gt;-base64&lt;/span&gt; 64 | &lt;span class=&quot;nb&quot;&gt;tr&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-cd&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'a-zA-Z'&lt;/span&gt; |head &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; 16

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$SYMBOL_DB_FILE&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$HEAD_FILE&lt;/span&gt;
createTable

&lt;span class=&quot;nb&quot;&gt;touch&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$HEAD_FILE&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'#ifndef Demo_codeObfuscation_h
#define Demo_codeObfuscation_h'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$HEAD_FILE&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;//confuse string at &lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$HEAD_FILE&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$STRING_SYMBOL_FILE&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; | &lt;span class=&quot;k&quot;&gt;while &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;read&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-ra&lt;/span&gt; line&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do
if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-z&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$line&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ramdom&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;ramdomString&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$line&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ramdom&lt;/span&gt;
insertValue &lt;span class=&quot;nv&quot;&gt;$line&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ramdom&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;#define &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$line&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ramdom&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$HEAD_FILE&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fi
done
&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;#endif&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$HEAD_FILE&lt;/span&gt;

sqlite3 &lt;span class=&quot;nv&quot;&gt;$SYMBOL_DB_FILE&lt;/span&gt; .dump

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;以上的 shell 脚本运行后会自动获取 &lt;code class=&quot;highlighter-rouge&quot;&gt;.h&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;m&lt;/code&gt; 文件中以 &lt;code class=&quot;highlighter-rouge&quot;&gt;vhl_&lt;/code&gt; 开头的方法写到到该文件。如果需要自定义的话，可以不执行以上那句命令，然后换成自己的规则写入 &lt;strong&gt;func.list&lt;/strong&gt; 中。例如：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vhl_isVIP
xx_showAD
yy_isAllow
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后在 &lt;code class=&quot;highlighter-rouge&quot;&gt;Build Phases&lt;/code&gt; 中，左上角加号添加 &lt;code class=&quot;highlighter-rouge&quot;&gt;run script&lt;/code&gt; 填入地址&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/p-ios-hikari/15402815261872.jpg&quot; alt=&quot;-w1125&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;32-查看编译结果&quot;&gt;3.2 查看编译结果&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/img/p-ios-hikari/15403674704990.jpg&quot; alt=&quot;-w899&quot; /&gt;
成功编译后，会在指定目录下生成一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;codeObfuscation.h&lt;/code&gt; 文件。这里可以看到，在编译过程中会执行 shell 脚本，对相关字符串进行替换&lt;/p&gt;

&lt;p&gt;添加 &lt;code class=&quot;highlighter-rouge&quot;&gt;.pch&lt;/code&gt; 文件，并在 &lt;code class=&quot;highlighter-rouge&quot;&gt;Build Setttings&lt;/code&gt; &amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;Prefix Header&lt;/code&gt; 中链接该 &lt;code class=&quot;highlighter-rouge&quot;&gt;.pch&lt;/code&gt; 文件，在 &lt;code class=&quot;highlighter-rouge&quot;&gt;.pch&lt;/code&gt; 文件中导入 &lt;code class=&quot;highlighter-rouge&quot;&gt;codeObfuscation.h&lt;/code&gt;，此时项目中指定的方法都被替换成了&lt;code class=&quot;highlighter-rouge&quot;&gt;codeObfuscation.h&lt;/code&gt; 中的宏定义。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/p-ios-hikari/15402867506913.jpg&quot; alt=&quot;-w906&quot; /&gt;&lt;/p&gt;

&lt;p&gt;运行成功后将 Products 中的二进制文件拖入到 hopper 中查看&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/p-ios-hikari/15402864436528.jpg&quot; alt=&quot;-w1008&quot; /&gt;&lt;/p&gt;

&lt;p&gt;此时，方法已经被混淆了。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;注意：这个不要大面积的使用，会有被审核拒绝的风险，拒绝原因是说你程序里面可能包含有隐藏功能，因为 apple 无法从这些混淆后的方法获取到有用的信息。&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;4-编译混淆&quot;&gt;4. 编译混淆&lt;/h2&gt;

&lt;p&gt;以上我们虽然对关键字符串进行了混淆，但是实际代码的执行逻辑等并没有改变。黑客仍然可以通过分析代码逻辑或者伪代码来寻找程序的漏洞。那有没有可能改变编译后的代码逻辑，从而让别人无法分析我们的程序呢。&lt;/p&gt;

&lt;h3 id=&quot;41-ios-是如何编译的&quot;&gt;4.1 iOS 是如何编译的&lt;/h3&gt;
&lt;p&gt;Objective C采用 &lt;strong&gt;Clang&lt;/strong&gt; 作为前端，而 Swift 则采用 &lt;strong&gt;swift()&lt;/strong&gt; 作为前端，二者都是用 &lt;strong&gt;LLVM(Low level vritual machine)&lt;/strong&gt; 作为编译器后端。&lt;/p&gt;

&lt;p&gt;编译命令地址&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Objective-C
/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang
# Swift
/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/swift
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Xcode 编译过程：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/p-ios-hikari/15403733934272.jpg&quot; alt=&quot;-w1132&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;42-编译器&quot;&gt;4.2 编译器&lt;/h3&gt;

&lt;h4 id=&quot;421-相关名词&quot;&gt;4.2.1 相关名词&lt;/h4&gt;
&lt;blockquote&gt;
  &lt;p&gt;GCC&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;（GNU Compiler Collection）缩写，一个编程语言编译器，是GNU（自由软件理事会）的关键部分。也是GNU工具链的一部分。GCC常被认为是跨平台编译器的事实标准，特别是它的C语言编译器。GCC原本只能处理C语言。但是面对Clang的竞争，很快作出了扩展，现在已经可以处理C++，Fortran、Pascal、Object-C、Java、Ada，以及Go语言。许多操作系统，包括许多Unix系统，如Linux及BSD家族都采用GCC作为标准编译器。MacOSX也是采用这个编译器。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;LLVM&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;是Low Level Virtual Machine的简称。这个库提供了与编译器相关的支持，能够进行程序语言的编译期优化、链接优化、在线编译优化、代码生成。可以作为多种语言编译器的后台来使用。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Clang&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Clang 是 LLVM 的子项目，是 C，C++ 和 Objective-C 编译器，目的是提供惊人的快速编译，比 GCC 快3倍，其中的 clang static analyzer 主要是进行语法分析，语义分析和生成中间代码，当然这个过程会对代码进行检查，出错的和需要警告的会标注出来。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;前端编译器&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;编译器前端的任务是进行：语法分析，语义分析，生成中间代码(intermediate representation )。在这个过程中，会进行类型检查，如果发现错误或者警告会标注出来在哪一行。
&lt;img src=&quot;/img/p-ios-hikari/15403735367044.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;后端编译器&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;编译器后端会进行机器无关的代码优化，生成机器语言，并且进行机器相关的代码优化。iOS的编译过程，后端的处理如下&lt;/p&gt;

&lt;p&gt;LVVM 优化器会进行 BitCode 的生成，链接期优化等等。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/p-ios-hikari/15403741982298.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;LLVM机器码生成器会针对不同的架构，比如arm64等生成不同的机器码。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/p-ios-hikari/15403742042150.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;2000年，伊利诺伊大学厄巴纳－香槟分校（University of Illinois at Urbana-Champaign 简称UIUC）这所享有世界声望的一流公立研究型大学的 &lt;strong&gt;Chris Lattner&lt;/strong&gt;（他的 twitter &lt;a href=&quot;https://twitter.com/clattner_llvm&quot;&gt;@clattner_llvm&lt;/a&gt; ） 开发了一个叫作 Low Level Virtual Machine 的编译器开发工具套件，后来涉及范围越来越大，可以用于常规编译器，JIT编译器，汇编器，调试器，静态分析工具等一系列跟编程语言相关的工作，于是就把简称 LLVM 这个简称作为了正式的名字。Chris Lattner 后来又开发了 Clang，使得 LLVM 直接挑战 GCC 的地位。2012年，LLVM 获得美国计算机学会 ACM 的软件系统大奖，和 UNIX，WWW，TCP/IP，Tex，JAVA 等齐名。&lt;/p&gt;

&lt;p&gt;Chris Lattner 生于 1978 年，2005年加入苹果，将苹果使用的 GCC 全面转为 LLVM。2010年开始主导开发 Swift 语言。&lt;/p&gt;

&lt;p&gt;iOS 开发中 Objective-C 是 Clang / LLVM 来编译的。&lt;/p&gt;

&lt;h3 id=&quot;43-hikari&quot;&gt;4.3 Hikari&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/HikariObfuscator/Hikari&quot;&gt;Hikari&lt;/a&gt; 是一个基于 &lt;a href=&quot;https://github.com/obfuscator-llvm/obfuscator&quot;&gt;Obfuscator-LLVM&lt;/a&gt; 对 Xcode9的适配。&lt;/p&gt;

&lt;p&gt;OLLVM 是瑞士西北应用科技大学安全实验室于2010年6月份发起的一个项目，该项目旨在提供一套开源的针对 LLVM 的代码混淆工具，以增加对逆向工程的难度。目前，OLLVM已经支持LLVM-4.0版本。&lt;/p&gt;

&lt;h4 id=&quot;431-安装&quot;&gt;4.3.1 安装&lt;/h4&gt;

&lt;p&gt;下载 github 提供的 pkg 安装文件并双击安装&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;https://github.com/HikariObfuscator/Hikari/releases
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后重启 Xcode 就能看到已经有 Kikari 编译工具&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/p-ios-hikari/15403757992100.jpg&quot; alt=&quot;-w640&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;432-使用&quot;&gt;4.3.2 使用&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Xcode&lt;/code&gt; -&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;Toolchains&lt;/code&gt; -&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;Hikari&lt;/code&gt; 将混淆工具和项目关联&lt;/li&gt;
  &lt;li&gt;将所有与要运行的 target 相关的 target（包括pod进来的库）&lt;code class=&quot;highlighter-rouge&quot;&gt;Enable Index-While-Building&lt;/code&gt; 的值改为 &lt;em&gt;NO&lt;/em&gt;。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Optimization Level&lt;/code&gt; 的值设置为 &lt;code class=&quot;highlighter-rouge&quot;&gt;None[-O0]&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;在 &lt;code class=&quot;highlighter-rouge&quot;&gt;Build Settings&lt;/code&gt; -&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;Other C Flags&lt;/code&gt; 中加入混淆标记&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-mllvm -enable-bcfobf 		启用伪控制流  
-mllvm -enable-cffobf 		启用控制流平坦化
-mllvm -enable-splitobf 	启用基本块分割  
-mllvm -enable-subobf 		启用指令替换  
-mllvm -enable-acdobf 		启用反class-dump  
-mllvm -enable-indibran 	启用基于寄存器的相对跳转，配合其他加固可以彻底破坏IDA/Hopper的伪代码(俗称F5)  
-mllvm -enable-strcry 		启用字符串加密  
-mllvm -enable-funcwra 		启用函数封装
-mllvm -enable-allob        依次性启用上述所有标记
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;重新编译就会使用 Hikari 在编译器后端对项目进行编译了。&lt;/p&gt;

&lt;p&gt;将编译后的二进制文件拖入 hopper 中进行对比&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/p-ios-hikari/15403763613907.jpg&quot; alt=&quot;-w1194&quot; /&gt;&lt;/p&gt;

&lt;p&gt;发现代码已经被混淆过了。
&lt;strong&gt;最新的 Xcode10 通过非官方默认的 Toolchains 编译后的的 ipa 是拒绝提交审核的。&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;

&lt;p&gt;以上是对 iOS 下马甲包，代码混淆，编译混淆的一些学习实践，实际使用中需要根据自己的实际需求进行调整尝试。&lt;/p&gt;

&lt;p&gt;demo 地址：&lt;a href=&quot;https://github.com/huanglins/iOSObfuscator&quot;&gt;iOSObfuscator&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;加密与破解，编译与反编译永远都是在不停攻防的。没有一堵绝对安全的墙，也没有绝对完美的银弹。只有在开发成本与安全成本中找个一个平衡，才是可持续发展的选择。&lt;/p&gt;

&lt;h1 id=&quot;参考文章&quot;&gt;参考文章&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;马甲包&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;https://www.jianshu.com/p/339c62db048f&quot;&gt;马甲包&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;https://github.com/klaus01/KLGenerateSpamCode&quot;&gt;KLGenerateSpamCode&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;逆向基础，为什么要混淆&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;http://www.cocoachina.com/mac/20150122/10988.html&quot;&gt;了解iOS上的可执行文件和Mach-O格式&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;类名/方法混淆&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/yiyaaixuexi/article/details/29201699&quot;&gt;iOS安全攻防（二十三）：Objective-C代码混淆&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;https://www.jianshu.com/p/19bf42f22473&quot;&gt;iOS代码混淆&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;编译混淆&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;https://github.com/ming1016/study/wiki/%E6%B7%B1%E5%85%A5%E5%89%96%E6%9E%90-iOS-%E7%BC%96%E8%AF%91-Clang---LLVM&quot;&gt;深入剖析 iOS 编译 Clang LLVM&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;https://juejin.im/post/5ba05c3c6fb9a05d31550275&quot;&gt;iOS混淆笔记&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzUxMzcxMzE5Ng==&amp;amp;mid=2247488360&amp;amp;idx=1&amp;amp;sn=94fba30a87d0f9bc0b9ff94d3fed3386&amp;amp;source=41#wechat_redirect&quot;&gt;基于clang插件的一种iOS包大小瘦身方案&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;https://juejin.im/post/5ba05c3c6fb9a05d31550275&quot;&gt;iOS混淆笔记&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;https://www.jianshu.com/p/a631b5584de6&quot;&gt;Obfuscator-LLVM在iOS中的实践&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;审核&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;https://juejin.im/post/5bbaba595188255c9f06cdfd?utm_source=gold_browser_extension&quot;&gt;一篇文章讲清如何应对 App Store 审核 2.1 大礼包&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 24 Oct 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/10/24/ios-hikari/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/10/24/ios-hikari/</guid>
        
        <category>iOS</category>
        
        <category>逆向工程</category>
        
        
      </item>
    
      <item>
        <title>正义和自由</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;纳粹抓了共产党人的时候，&lt;/p&gt;

  &lt;p&gt;我沉默了；&lt;/p&gt;

  &lt;p&gt;我又不是共产党人。&lt;/p&gt;

  &lt;p&gt;.&lt;/p&gt;

  &lt;p&gt;当他们关了社民党人的时候，&lt;/p&gt;

  &lt;p&gt;我沉默了；&lt;/p&gt;

  &lt;p&gt;我又不是社民党人。&lt;/p&gt;

  &lt;p&gt;.&lt;/p&gt;

  &lt;p&gt;当他们抓工会成员的时候，&lt;/p&gt;

  &lt;p&gt;我没有抗议；&lt;/p&gt;

  &lt;p&gt;我又不是工会成员。&lt;/p&gt;

  &lt;p&gt;.&lt;/p&gt;

  &lt;p&gt;当他们抓犹太人的时候，&lt;/p&gt;

  &lt;p&gt;我沉默了；&lt;/p&gt;

  &lt;p&gt;我又不是犹太人。&lt;/p&gt;

  &lt;p&gt;.&lt;/p&gt;

  &lt;p&gt;当他们抓我的时候，&lt;/p&gt;

  &lt;p&gt;不再有什么人，能够为我抗议。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;今天，滴滴再一次成为舆论中心，又有一位女生打顺风车被奸杀，距离上一次郑州空乘打滴滴顺风车被奸杀才三个月。哪怕被害人不停的联系滴滴客服和警方，哪怕这个司机头一天才被投诉有骚扰乘客。可是，滴滴什么也没做，这三个月时间内滴滴毫无反思和改进，完全没有建立一套应急安全机制来保障乘客的安全，照常让该司机接单，导致悲剧再次发生。&lt;/p&gt;

&lt;p&gt;不过，我不想叨叨念地讲女性要注意安全什么之类的，这些被大家讲得反倒快当成儿戏了。我想讲的是另一个，是在我前几天看到的深/圳佳 士工人维权事件之后，内心久久不能平静，却发现国内媒体，微博一点消息都没有。才发现这一段时间内发生太多影响面巨大，和人民息息相关的事件，寿光洪灾，工人维权，疫苗事件，幼儿园虐童，滴滴事件。。。&lt;/p&gt;

&lt;p&gt;这些都是最近发生的事情，却发现很多人只当做饭后无聊的谈资，他们并没有意识到这些其实都是和他们息息相关的事情，只是这次恰巧幸运地没发生在他们自己身上而已。前几天我在医院投诉医生抽烟那会儿，我问引导台的工作人员投诉通道在哪里，他们第一想到的竟然是拉住我叫我别投诉，多大点事不是嘛。我反问他们，你们难道没意识到这是不对的吗？他们也就笑笑的走开了。&lt;/p&gt;

&lt;p&gt;我很早以前意识到我应该是一个公民而不是人民或老百姓的时候，看到社会不公会义愤填膺，会呼吁和抗争，我觉得这是作为一个公民而言基本的权利和义务。这在一些人看来反倒成了异类，他们说，何必呢，你又做得了什么呢？这就是为什么说国人对于压迫总是逆来顺受，那些印刻在民族骨子里的劣根性是去不掉的。国人总会对强权和不公选择性失忆，健忘，然后用厉害了我的国来安慰自己。有一天我在想，为什么国人总是健忘，我想到历史上讲，“3,5个日本兵就能押着成百上千的中国人”，他们难道不会反抗吗？他们估计从来就没想过反抗这事儿，因为中国人最缺乏”思想”，最缺乏拥有”思想”的历史，最缺乏思想的充分自由交流。这是因为自古以来，中国人的“思想”交流、言论“信息”交流，早就已经，甚至永远都处于统治者所极力维护的封闭的、禁锢的、点滴不漏的“一滩死水”，乃至“酱缸”之中。&lt;/p&gt;

&lt;p&gt;不过这几年来，随着80,90后成为这个社会的活跃思想核心，会看到越来越多不盲从，有独立思考的人。会看到舆论的作用越来越有效，微博一曝光比报警还有用。因为有更多的人在强调个人意志和自由，在行使一个公民应有的权力和义务，共同推动我们所处的这个社会进步。&lt;/p&gt;

&lt;p&gt;我想讲的是，我们永远避免不了天灾人祸，强权和不公的发生。但是看到不公的时候，如果我们什么也不做保持中立，那其实是选择在压迫者一边的。所以我们要去抨击和抗争，哪怕一个人的力量很小，但是思想影响的力量是无穷无尽的，只有这样才能唤醒更多失忆和健忘的国人。&lt;/p&gt;

&lt;p&gt;愿我们都有一颗勇敢的心，高喊正义与自由。&lt;/p&gt;

&lt;h4 id=&quot;x&quot;&gt;X&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.sina.com.cn/s/blog_4757606d0100el7j.html&quot;&gt;中国人为什么最“健忘”&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://huangxuan.me/2017/06/24/you-are-slaves/&quot;&gt;他是狗，你们便是苟奴隶&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Sat, 25 Aug 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/08/25/justice-and-freedom/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/08/25/justice-and-freedom/</guid>
        
        <category>freedom</category>
        
        
      </item>
    
      <item>
        <title>iOS 西培学堂 - 绕过人脸识别</title>
        <description>&lt;p&gt;最近在学习驾照，考科目一的时候需要在 &lt;strong&gt;西培学堂&lt;/strong&gt; 上面学习视频 1320 分钟。最主要的是每隔25分钟就要进行一次人脸识别验证，没有立即验证的话单次学习的时间就会失效。本着好好学习的态度，于是想看下能不能友好的进行人脸识别。..&lt;/p&gt;

&lt;h4 id=&quot;抓包测试&quot;&gt;抓包测试&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/img/p-xipeixuetang/uploadimage.png&quot; alt=&quot;&quot; /&gt;
抓包测试发现，人脸识别是在本地进行校验的，识别成功后再将识别的结果图片上传到服务器进行保存，并记录时间。那么这样的话，我们就可以在本地将人脸识别绕过，并传一张假图片给服务器就行了(手动滑稽..)&lt;/p&gt;

&lt;h4 id=&quot;导出头文件&quot;&gt;导出头文件&lt;/h4&gt;

&lt;p&gt;首先我们在 PP助手上下载已经脱壳的 IPA，然后导出所有头文件。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class-dump -H /xx/xx/tbtimingCount.app/tbtimingCount -o /Users/xx/Desktop/header
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;分析测试&quot;&gt;分析测试&lt;/h4&gt;

&lt;p&gt;搜索 &lt;code class=&quot;highlighter-rouge&quot;&gt;face&lt;/code&gt; 相关的文件
&lt;img src=&quot;/img/p-xipeixuetang/search_face.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;打开 Xcode 新建一个 &lt;a href=&quot;https://github.com/AloneMonkey/MonkeyDev&quot;&gt;MonkeyDev&lt;/a&gt; 工程，将 ipa 导入工程。&lt;/p&gt;

&lt;p&gt;经测试，&lt;strong&gt;TbCameraWalk&lt;/strong&gt; 这个文件用来处理学习计时和调用摄像头进行人脸识别的相关操作。
&lt;img src=&quot;/img/p-xipeixuetang/file_source.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;其中检测到需要人脸识别摄像头被调用时，会响应以下方法:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- (void)cwFaceInfoCallBack:(id)arg1;                                // 人脸识别结果
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;该文件中有一个人脸识别结果回调，返回一个图片信息，界面收到回调时将会调用接口上传人脸识别图片并计时。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/p-xipeixuetang/delegate_source.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;检测完成，关闭人脸识别界面方法为：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- (void)liveDetectSucess;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;编码&quot;&gt;编码&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/img/p-xipeixuetang/reverse_code.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在摄像头回调中直接将上面抓包的 Image Base64的数据，手动调用给 Delegate，测试发现后台服务器并没有再次进行图像比较。然后手动调用检测成功，关闭页面。&lt;/p&gt;

</description>
        <pubDate>Thu, 08 Mar 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/03/08/reverse-xipeixuetang/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/03/08/reverse-xipeixuetang/</guid>
        
        <category>iOS</category>
        
        <category>iOS 逆向</category>
        
        
      </item>
    
      <item>
        <title>iOS11/iPhone X 适配(填坑)指南</title>
        <description>&lt;h2 id=&quot;适配-ios11&quot;&gt;适配 iOS11&lt;/h2&gt;

&lt;h4 id=&quot;1-uitableview-contentoffset-下移-20&quot;&gt;1. UITableView contentOffset 下移 20&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;if (@available(iOS 11.0, *)) {
	if ([self.tableView respondsToSelector:@selector(setContentInsetAdjustmentBehavior:)]) {
		self.tableView.contentInsetAdjustmentBehavior = UIScrollViewContentInsetAdjustmentNever;
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;适配-iphone-x&quot;&gt;适配 iPhone X&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;手机型号&lt;/th&gt;
      &lt;th&gt;屏幕尺寸&lt;/th&gt;
      &lt;th&gt;屏幕密度&lt;/th&gt;
      &lt;th&gt;开发尺寸&lt;/th&gt;
      &lt;th&gt;像素尺寸&lt;/th&gt;
      &lt;th&gt;倍图&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;4/4S&lt;/td&gt;
      &lt;td&gt;3.5英寸&lt;/td&gt;
      &lt;td&gt;326ppi&lt;/td&gt;
      &lt;td&gt;320x486 pt&lt;/td&gt;
      &lt;td&gt;640x969 pt&lt;/td&gt;
      &lt;td&gt;@2x&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;5/5S/5C&lt;/td&gt;
      &lt;td&gt;4英寸&lt;/td&gt;
      &lt;td&gt;326ppi&lt;/td&gt;
      &lt;td&gt;320x568 pt&lt;/td&gt;
      &lt;td&gt;640x1136 px&lt;/td&gt;
      &lt;td&gt;@2x&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;6/6S/7/8&lt;/td&gt;
      &lt;td&gt;4.7英寸&lt;/td&gt;
      &lt;td&gt;326ppi&lt;/td&gt;
      &lt;td&gt;375x667 pt&lt;/td&gt;
      &lt;td&gt;750x1334 px&lt;/td&gt;
      &lt;td&gt;@2x&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;6+/6S+/7+/8+&lt;/td&gt;
      &lt;td&gt;5.5英寸&lt;/td&gt;
      &lt;td&gt;401ppi&lt;/td&gt;
      &lt;td&gt;414x736 pt&lt;/td&gt;
      &lt;td&gt;1242*2208 px&lt;/td&gt;
      &lt;td&gt;@3x&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;X&lt;/td&gt;
      &lt;td&gt;5.8英寸&lt;/td&gt;
      &lt;td&gt;458英寸&lt;/td&gt;
      &lt;td&gt;375x812 pt&lt;/td&gt;
      &lt;td&gt;1125x2436 px&lt;/td&gt;
      &lt;td&gt;@3x&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;首先需要在 &lt;code class=&quot;highlighter-rouge&quot;&gt;Assets.xcassets&lt;/code&gt; 中设置 iPhone X 的 &lt;code class=&quot;highlighter-rouge&quot;&gt;LaunchImage&lt;/code&gt;。一张&lt;code class=&quot;highlighter-rouge&quot;&gt;1125*2436&lt;/code&gt;的启动图。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/p-ios11-adapter/iphonex_launch.png&quot; alt=&quot;iPhone X&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;iPhone X&lt;/strong&gt; 宏定义&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#define iPhoneX ([UIScreen instancesRespondToSelector:@selector(currentMode)] ? \
        CGSizeEqualToSize(CGSizeMake(1125, 2436), [[UIScreen mainScreen] currentMode].size) : NO)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;我的开源项目&quot;&gt;我的开源项目&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/huanglins/VHLNavigation&quot;&gt;VHLNavigation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;实现各种导航栏间的无缝切换，微信红包样式导航栏样式切换，颜色过渡切换，导航栏背景图片切换，导航栏透明度切换，有无导航栏切换等。&lt;/p&gt;

</description>
        <pubDate>Tue, 19 Sep 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/09/19/ios11-iphonex-adapter/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/09/19/ios11-iphonex-adapter/</guid>
        
        <category>iOS</category>
        
        
      </item>
    
      <item>
        <title>MySQL 相关语法及函数</title>
        <description>&lt;h2 id=&quot;函数&quot;&gt;函数&lt;/h2&gt;

&lt;h4 id=&quot;合计函数&quot;&gt;合计函数&lt;/h4&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;函数&lt;/th&gt;
      &lt;th&gt;说明&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;AVG(column)&lt;/td&gt;
      &lt;td&gt;返回某一列的平均值&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;COUNT(column)&lt;/td&gt;
      &lt;td&gt;返回某一列的行数（不包括 NULL 值）&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;COUNT(*)&lt;/td&gt;
      &lt;td&gt;返回被选中的行数&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;MAX(column)&lt;/td&gt;
      &lt;td&gt;返回某列的最高值&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;MIN(column)&lt;/td&gt;
      &lt;td&gt;返回某列的最低值&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;SUM(column)&lt;/td&gt;
      &lt;td&gt;返回某列的总和&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;GROUP_CONCAT(column)&lt;/td&gt;
      &lt;td&gt;返回某列值连接组合而成的结果（通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;,&lt;/code&gt; 连接）&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&quot;数学函数&quot;&gt;数学函数&lt;/h4&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;函数&lt;/th&gt;
      &lt;th&gt;说明&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;ABS(x)&lt;/td&gt;
      &lt;td&gt;返回 x 的绝对值。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;CEIL(x) / CEILING(x)&lt;/td&gt;
      &lt;td&gt;返回大于或等于 x 的最小整数。 &lt;code class=&quot;highlighter-rouge&quot;&gt;SELECT CEIL(1.5)&lt;/code&gt; 返回 2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;FLOOL(x)&lt;/td&gt;
      &lt;td&gt;返回小于或等于 x 的最大整数。 &lt;code class=&quot;highlighter-rouge&quot;&gt;SELECT FLOOR(1.5)&lt;/code&gt; 返回1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;RAND()&lt;/td&gt;
      &lt;td&gt;返回 0-1 之间的随机数。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;SIGN(x)&lt;/td&gt;
      &lt;td&gt;返回 x 的符号。负数返回-1，0返回0，正数返回1。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;PI()&lt;/td&gt;
      &lt;td&gt;返回圆周率 (3.141593)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;TRUNCATE(x, y)&lt;/td&gt;
      &lt;td&gt;返回保留数值 x 到小数点后 y 位的值&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;ROUND(x)&lt;/td&gt;
      &lt;td&gt;返回离 x 最近的整数。&lt;code class=&quot;highlighter-rouge&quot;&gt;SELECT ROUND(1.23456)&lt;/code&gt; 返回 1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;ROUND(x, y)&lt;/td&gt;
      &lt;td&gt;保留离 x 最近的整数，但截断的时候要进行四舍五入。&lt;code class=&quot;highlighter-rouge&quot;&gt;SELECT ROUND(1.23456,3)&lt;/code&gt; 返回 1.235&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;POWER(x, y)&lt;/td&gt;
      &lt;td&gt;返回 x 的 y 次方。&lt;code class=&quot;highlighter-rouge&quot;&gt;SELECT POWER(2,3)&lt;/code&gt; 返回 8&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;SQRT(x)&lt;/td&gt;
      &lt;td&gt;返回 x 的平方根。&lt;code class=&quot;highlighter-rouge&quot;&gt;SELECT SQRT(25)&lt;/code&gt; 返回 5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;EXP(x)&lt;/td&gt;
      &lt;td&gt;返回 e(自然对数的底 2.718281828459)的 x 次方。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;MOD(x, y)&lt;/td&gt;
      &lt;td&gt;返回 x 除以 y 以后的余数。&lt;code class=&quot;highlighter-rouge&quot;&gt;SELECT MOD(5, 3)&lt;/code&gt; 返回2&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&quot;字符串函数&quot;&gt;字符串函数&lt;/h4&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;函数&lt;/th&gt;
      &lt;th&gt;说明&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;ASCII(s)&lt;/td&gt;
      &lt;td&gt;返回字符串 s 的 ASCII 码值。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;CHAR_LENGTH(s)&lt;/td&gt;
      &lt;td&gt;返回字符串 s 的字符数。&lt;code class=&quot;highlighter-rouge&quot;&gt;SELECT CHAR_LENGTH('你好123')&lt;/code&gt; 返回 5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;LENGTH(s)&lt;/td&gt;
      &lt;td&gt;返回字符串 s 的长度。&lt;code class=&quot;highlighter-rouge&quot;&gt;SELECT LENGTH('你好123')&lt;/code&gt; 返回 9&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;CONCAT(s1, s2, …)&lt;/td&gt;
      &lt;td&gt;将字符串 s1, s2 等多个字符串合并为一个字符串&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;CONCAT_WS(x, s1, s2, …)&lt;/td&gt;
      &lt;td&gt;同 CONCAT(s1, s2,…) 函数，不过两个字符串连接之间要加上 x。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;UPPER(s)&lt;/td&gt;
      &lt;td&gt;将字符串 s 的所有字母变成大写字母&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;LOWER(s)&lt;/td&gt;
      &lt;td&gt;将字符串 s 的所有字母变成小写字母&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;LEFT(s, n)&lt;/td&gt;
      &lt;td&gt;返回字符串 s 的前 n 个字符&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;RIGHT(s, n)&lt;/td&gt;
      &lt;td&gt;返回字符串 s 的后 n 个字符&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;REPEAT(s, n)&lt;/td&gt;
      &lt;td&gt;将字符串重复 n 次&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;SPACE(n)&lt;/td&gt;
      &lt;td&gt;返回 n 个空格&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;REPLACE(s, s1, s2)&lt;/td&gt;
      &lt;td&gt;将字符串 s2 替代字符串 s 中的字符串 s1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;STRCMP(s1, s2)&lt;/td&gt;
      &lt;td&gt;比较 s1和s2.返回 -1，0，1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;SUBSTRING(s1, s2)&lt;/td&gt;
      &lt;td&gt;获取从字符串 s 中的第 n 个位置开始长度为 len 的字符串。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;REVERSE(s)&lt;/td&gt;
      &lt;td&gt;将字符串 s 反转&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;LOAD_FILE(file_name)&lt;/td&gt;
      &lt;td&gt;读入文件并作为一个字符串返回文件内容&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&quot;日期和时间函数&quot;&gt;日期和时间函数&lt;/h4&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;函数&lt;/th&gt;
      &lt;th&gt;说明&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;NOW()&lt;/td&gt;
      &lt;td&gt;返回当前的日期和时间&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;CURDATE()&lt;/td&gt;
      &lt;td&gt;返回当前的日期&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;CURTIME()&lt;/td&gt;
      &lt;td&gt;返回当前的时间&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;MONTH(d)&lt;/td&gt;
      &lt;td&gt;返回日期 d 中的月份值&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;MONTHNAME(d)&lt;/td&gt;
      &lt;td&gt;返回日期 d 中的月份名称。如：August&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;HOUR(d)&lt;/td&gt;
      &lt;td&gt;返回时间 d 的小时值&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;MINUTE(d)&lt;/td&gt;
      &lt;td&gt;返回时间 d 的分钟值&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;SECOND(d)&lt;/td&gt;
      &lt;td&gt;返回时间 d 的秒钟值&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;DAYNAME(d)&lt;/td&gt;
      &lt;td&gt;返回日期d 中是星期几。如：Monday,Tuesday&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;DAYOFWEEK(d)&lt;/td&gt;
      &lt;td&gt;返回日期d 是星期几。如：1星期日，2星期一..&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;WEEK(d)&lt;/td&gt;
      &lt;td&gt;返回时间d 是本年的第几个星期，范围:0-&amp;gt;53&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;DAYOFMONTH(d)&lt;/td&gt;
      &lt;td&gt;计算时间d 是本月的第几天&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;DAYOFYEAR(d)&lt;/td&gt;
      &lt;td&gt;计算时间d 是本年的第几天&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;QUARTER(d)&lt;/td&gt;
      &lt;td&gt;计算时间d 是本年的第几个季节。返回 1-4&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;UNIX_TIMESTAMP()&lt;/td&gt;
      &lt;td&gt;以 unix 时间戳的形式返回当前时间&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;FROM_UNIXTIME(10位时间戳)&lt;/td&gt;
      &lt;td&gt;将 unix 时间戳转换为 YYYY-MM-dd HH:mm:ss 格式的时间&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;DATEDIFF(d1, d2)&lt;/td&gt;
      &lt;td&gt;计算日期 d1-d2 之间相隔的天数&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;ADDDATE(d, n)&lt;/td&gt;
      &lt;td&gt;计算日期 d 加上 n 天的日期&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;ADDDATE(d, INTERVAL expr type)&lt;/td&gt;
      &lt;td&gt;计算日期 d 加上一个日期值后的日期。例如: &lt;code class=&quot;highlighter-rouge&quot;&gt;ADDDATE(n, INTERVAL 1 DAY)&lt;/code&gt; 表示加上一天，&lt;code class=&quot;highlighter-rouge&quot;&gt;ADDDATE(INTERVAL -1 MONTH)&lt;/code&gt; 表示减去一个月。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;SUBDATE(d, n)&lt;/td&gt;
      &lt;td&gt;计算日期 d 减去 n 天的日期&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;DATEDIFF(d1, d2)&lt;/td&gt;
      &lt;td&gt;计算日期 d1 与 d2 之间相隔的天数&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&quot;条件判断&quot;&gt;条件判断&lt;/h4&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;函数&lt;/th&gt;
      &lt;th&gt;说明&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;IF(expr, v1, v2)&lt;/td&gt;
      &lt;td&gt;例如：&lt;code class=&quot;highlighter-rouge&quot;&gt;SELECT IF(1 &amp;gt; 0, '正确', '错误')&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;IFNULL(v1 , v2)&lt;/td&gt;
      &lt;td&gt;如果 v1 的值不为 NULL，则返回 v1，否则返回 v2。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;CASE&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;CASE 语法&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;第一种&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;CASE
	WHEN e1
	THEN v1
	WHEN e2
	THEN v2
	...
	ELSE vn
END
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;CASE 表示函数开始，END 表示函数结束。如果 e1，则返回 v1；如果 e2 成立，则返回 v2；当前全部不成立则返回 vn。而当一个成立，后面的就不执行。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;第二种&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;CASE expr
	WHEN e1 THEN v1
	WHEN e2 THEN v2
	...
	ELSE vn
END
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;如果表达式 expr 的值等于 e1，则返回 v1；如果等于 e2，则返回 v2。否则返回 vn。&lt;/p&gt;

&lt;h4 id=&quot;系统信息函数&quot;&gt;系统信息函数&lt;/h4&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;函数&lt;/th&gt;
      &lt;th&gt;说明&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;VERSION()&lt;/td&gt;
      &lt;td&gt;返回数据库的版本号&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;CONNECTION_ID()&lt;/td&gt;
      &lt;td&gt;返回服务器的连接数&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;USER()&lt;/td&gt;
      &lt;td&gt;返回当前的用户&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;LAST_INSERT_ID()&lt;/td&gt;
      &lt;td&gt;返回最近生成的 AUTO_INCREMENT 值&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&quot;加密函数&quot;&gt;加密函数&lt;/h4&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;函数&lt;/th&gt;
      &lt;th&gt;说明&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;PASSWORD(str)&lt;/td&gt;
      &lt;td&gt;对 str 字符串进行加密&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;MD5(str)&lt;/td&gt;
      &lt;td&gt;对字符串 str 进行散列，用于一些普通的不需要解密的数据进行加密&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;SHA(str)&lt;/td&gt;
      &lt;td&gt;SHA 加密&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;SHA1(str)&lt;/td&gt;
      &lt;td&gt;SHA1 加密&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;ENCODE(str, key) , DECODE(str, key)&lt;/td&gt;
      &lt;td&gt;使用 key 作为秘钥加密解密字符串 str，这两个函数是一对的。加密和解密。&lt;em&gt;非要注意的是，对应字段用 blob 类型&lt;/em&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&quot;其他函数&quot;&gt;其他函数&lt;/h4&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;函数&lt;/th&gt;
      &lt;th&gt;说明&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;CONVERT(s USING utf8)&lt;/td&gt;
      &lt;td&gt;将字符串转换成 utf8&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;参考学习地址&quot;&gt;参考学习地址&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://www.jianshu.com/p/32bc449a1bf6&quot;&gt;MySql函数大全&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;http://www.w3school.com.cn/sql/index.asp&quot;&gt;SQL 教程&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;http://www.jb51.net/article/40179.htm&quot;&gt;MySql常用函数汇总&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Sat, 26 Aug 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/08/26/mysql-function/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/08/26/mysql-function/</guid>
        
        <category>MySQL</category>
        
        
      </item>
    
      <item>
        <title>CentOS 防火墙配置之 iptables和DDoS deflate</title>
        <description>&lt;h2 id=&quot;iptables&quot;&gt;iptables&lt;/h2&gt;
&lt;p&gt;netfilter/iptables IP 信息包过滤系统是一种功能强大的工具，可用于添加、编辑和除去规则，这些规则是在做信息包过滤决定时，防火墙所遵循和组成的规则。这些规则存储在专用的信息包过滤表中，而这些表集成在 Linux 内核中。在信息包过滤表中，规则被分组放在我们所谓的链（chain）中。&lt;/p&gt;

&lt;p&gt;netfilter 组件也称为内核空间（kernelspace），是内核的一部分，由一些信息包过滤表组成，这些表包含内核用来控制信息包过滤处理的规则集。
iptables 建立在 netfilter 架构基础上的一个包过滤管理工具，也称为用户空间（userspace），它使插入、修改和除去信息包过滤表中的规则变得容易。
iptables包含4个表，5个链。其中表是按照对数据包的操作区分的，链是按照不同的Hook点来区分的，表和链实际上是netfilter的两个维度。&lt;/p&gt;

&lt;h4 id=&quot;1iptables-语法规则&quot;&gt;1.iptables 语法规则&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;iptables [-t 表] 大写选项子命令(-A) [规则号] 链名 匹配标准(-s xx.xx.xx.xx) -j 目标（规则）
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;注意：所有表名必须小写，命令动作必须大写，链名必须大写，匹配标准必须小写，目标规则必须大写&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&quot;2iptables-表&quot;&gt;2.iptables 表&lt;/h4&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;filter&lt;/td&gt;
      &lt;td&gt;一般的数据包过滤功能&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;nat&lt;/td&gt;
      &lt;td&gt;用于nat(网络地址转换)功能（端口映射，地址映射等）&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;mangle&lt;/td&gt;
      &lt;td&gt;用于对特定数据包进行修改&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;raw&lt;/td&gt;
      &lt;td&gt;优先级最高，设置raw时一般是为了不再让iptables做数据包的链接跟踪处理，提高性能&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;表的处理优先级：raw &amp;gt; mangle &amp;gt; nat &amp;gt; filter&lt;/p&gt;

&lt;h4 id=&quot;3iptables-链&quot;&gt;3.iptables 链&lt;/h4&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;PREROUTING&lt;/td&gt;
      &lt;td&gt;数据包进入路由表之前&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;INPUT&lt;/td&gt;
      &lt;td&gt;通过路由表后目的地为本机&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;FORWARDING&lt;/td&gt;
      &lt;td&gt;通过路由表后，目的地不为本机&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;OUTPUT&lt;/td&gt;
      &lt;td&gt;由本机产生，向外转发&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;POSTROUTIONG&lt;/td&gt;
      &lt;td&gt;发送到网卡之前。&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;如图：
&lt;img src=&quot;/img/p-iptables/iptables_chain.png&quot; alt=&quot;&quot; /&gt;
iptables 中表和链的对应关系如下：
&lt;img src=&quot;/img/p-iptables/iptables_chain1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;表&lt;/th&gt;
      &lt;th&gt;包含的规则链&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;filter&lt;/td&gt;
      &lt;td&gt;INPUT , FORWARD , OUTPUT&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;nat&lt;/td&gt;
      &lt;td&gt;PREROUTING , OUTPUT , POSTROUTING&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;mangle&lt;/td&gt;
      &lt;td&gt;PREROUTING , OUTPUT , POSTROUTING&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&quot;4iptables-相关参数&quot;&gt;4.iptables 相关参数&lt;/h4&gt;

&lt;h5 id=&quot;41命令参数&quot;&gt;4.1.命令参数&lt;/h5&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;-A&lt;/td&gt;
      &lt;td&gt;向规则链中添加一条规则，默认被添加到末尾&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-I&lt;/td&gt;
      &lt;td&gt;插入一条规则，默认会被插入到首部&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-T&lt;/td&gt;
      &lt;td&gt;指定要操作的表，默认是 &lt;em&gt;filter&lt;/em&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-D&lt;/td&gt;
      &lt;td&gt;从规则链中删除规则，可以指定序号或者匹配的规则来删除&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-R&lt;/td&gt;
      &lt;td&gt;进行规则替换&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-F&lt;/td&gt;
      &lt;td&gt;清空所选的链，重启后恢复&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-N&lt;/td&gt;
      &lt;td&gt;新建用户自定义规则链&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-X&lt;/td&gt;
      &lt;td&gt;删除用户自定义的规则链&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h5 id=&quot;42匹配标准参数&quot;&gt;4.2.匹配标准参数&lt;/h5&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;-p&lt;/td&gt;
      &lt;td&gt;用来指定协议。可以是 tcp，udp，icmp等，也可以是数字的协议号&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-s&lt;/td&gt;
      &lt;td&gt;指定源地址&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-d&lt;/td&gt;
      &lt;td&gt;指定目的地址&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-i&lt;/td&gt;
      &lt;td&gt;进入接口&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-o&lt;/td&gt;
      &lt;td&gt;流出接口&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;–sport&lt;/td&gt;
      &lt;td&gt;源端口&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;–dport&lt;/td&gt;
      &lt;td&gt;目的端口，端口必须和协议一起来配合使用&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h5 id=&quot;43目标规则&quot;&gt;4.3.目标规则&lt;/h5&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;-j&lt;/td&gt;
      &lt;td&gt;采取的动作。ACCEPT(接收)，DROP(丢弃)，REJECT(拒绝)，&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;RETURN(返回主键继续匹配)，REDIRECT(端口重定向)，&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;MASQUERADE(地址伪装)，DNAT(目标地址转换)，SNAT(源地址转换)，MARK(打标签)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&quot;5iptables-实际操作&quot;&gt;5.iptables 实际操作&lt;/h4&gt;

&lt;p&gt;以上是 iptables 语法规则的相关参数和说明，现在让我们来实际操作使用一下。一般常用操作的是 &lt;code class=&quot;highlighter-rouge&quot;&gt;filter&lt;/code&gt;表， &lt;code class=&quot;highlighter-rouge&quot;&gt;mangle&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;raw&lt;/code&gt; 请自行 google 高级用法。&lt;/p&gt;

&lt;h5 id=&quot;51基本使用&quot;&gt;5.1.基本使用&lt;/h5&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;列出 iptables 规则
# iptables -L		# 默认选择 filter 表
# iptables -t nat -L

清除 内置规则
# iptables -F
# iptables -t nat -F

清除自定义规则
# iptables -X
# iptables -t nat -F 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;52filter&quot;&gt;5.2.filter&lt;/h5&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;禁止某个IP访问
# iptables -I INPUT -s xxx.xxx.xx.x -j DROP

服务器禁止被 ping
# iptables -A INPUT -p icmp -j DROP
禁止某个 IP ping 服务器
# iptables -A INPUT -p icmp -s xxx.xxx.xx.x -j DROP
只允许某个 IP ping 服务器
# iptables -I INPUT -p icmp -s xxx.xxx.xx.x -j ACCEPT

开启端口服务
# iptables -A OUTPUT -p udp -o eth0 --dport 53 -j ACCEPT
# iptables -A INPUT -p udp -i eth0 --sport 53 -j ACCEPT

开启转发功能
- 普通转发，假设 eth0 连接内网，eth1 连接公网。(必须要有2块网卡)
# iptables -A FORWARD -i eth0 -o eth1 -j ACCEPT
- 只允许已建连接以及相关连接对内转发
# iptables -A FORWARD -i eth0 -o eth1 -m state --state RELATED,ESTABLISHED -j ACCEPT
- 允许对外转发
# iptables -A FORWARD -i eth1 -o eth0 -j ACCEPT

允许 loopback 回环通讯
# iptables -A INPUT -i lo -p all -j ACCEPT
# iptables -A OUTPUT -o lo -p all -j ACCEPT

实例：当总连接数超过100时，启用 litmit/minute 限制
# iptables -A INPUT -p tcp --dport 80 -m limit --limit 25/minute --limit-burst 100 -j ACCEPT
- litmit 25/minute 每分钟限制最大连接数为25
- litmit-burst 100 当总连接数超过100时，启动 limit/minute 限制
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;53-nat&quot;&gt;5.3 nat&lt;/h5&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;目的地址转换，映射内部地址
# iptables -t nat -A PREROUTING -i ppp0 -p tcp --dprot 81 -j DNAT --to 192.168.0.2:80
# iptables -t nat -A PREROUTING -i ppp0 -p tcp --dprot 81 -j DNAT --to 192.168.0.1-192.168.0.10

源地址转换，隐藏内部地址
# iptables -t nat -A POSTROUTING -s 192.168.0.0/24 -j SNAT --to 1.1.1.1
# iptables -t nat -A POSTROUTING -s 192.168.0.0/24 -j SNAT --to 1.1.1.1-1.1.1.10

地址伪装，动态ip的NAT（地址转换）
# iptables -t nat -A POSTROUTING -s 192.168.0.0/24 -j MASQUERADE
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;masquerade&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;snat&lt;/code&gt; 的主要区别在于，snat 是把源地址转换为固定的 IP 地址或者是地址池，而 masquerade 在 adsl 等方式拨号上网时候非常有用，因为是拨号上网所以网卡的外网IP经常变化，这样在进行地址转换的时候就要在每次都要修改转换策略里面的 ip，使用 masquerade 就很好的解决了这个问题，他会自己去探测外网卡获得的ip地址然后自动进行地址转换，这样就算外网获得的 ip 经常变化也不用人工干预了。&lt;/p&gt;

&lt;h5 id=&quot;54-删除规则&quot;&gt;5.4 删除规则&lt;/h5&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;iptables -D chain rulenum [options]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;chain 是链的意思，就是 INPUT FORWARD 之类的定语，rulenum 是该条规则的编号，从1开始。可以使用&lt;code class=&quot;highlighter-rouge&quot;&gt;iptables -L INPUT --line&lt;/code&gt;列出指定的链的规则的编号来。然后通过编号删除&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;iptables -D INPUT 1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;第二种办法是 &lt;code class=&quot;highlighter-rouge&quot;&gt;-A&lt;/code&gt; 命令的映射，不过用 &lt;code class=&quot;highlighter-rouge&quot;&gt;-D&lt;/code&gt; 替换 &lt;code class=&quot;highlighter-rouge&quot;&gt;-A&lt;/code&gt; 。当你的链中规则很复杂，而你不想计算它们的编号的时候这就十分有用了。
也就是说，你如何一开始时用 &lt;code class=&quot;highlighter-rouge&quot;&gt;iptables -A.... &lt;/code&gt;语句定义了一个规则，那么删除此条规则时直接用 &lt;code class=&quot;highlighter-rouge&quot;&gt;-D&lt;/code&gt; 来代替 &lt;code class=&quot;highlighter-rouge&quot;&gt;-A&lt;/code&gt;， 其余的都不变即可，而不需要什么编号了。&lt;/p&gt;

&lt;h2 id=&quot;ddos-deflate&quot;&gt;DDoS deflate&lt;/h2&gt;
&lt;p&gt;DDos deflate 是一款免费的用来防御和减轻 DDos 攻击的脚本。它通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;netstat&lt;/code&gt; 监测跟踪与服务器创建了大量网络连接的IP地址，在监测到某个节点超过预设的限制时，该程序会通过 APF 或者 iptables 对这些 IP 进行一段时间内的禁止访问。&lt;/p&gt;

&lt;p&gt;DDoS deflate官方网站：&lt;a href=&quot;http://deflate.medialayer.com/&quot;&gt;http://deflate.medialayer.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;如何确定是否受到DDoS攻击了呢?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;执行 &lt;em&gt;netstat&lt;/em&gt; 命令&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;netstat -ntu | awk '{print $5}' | cut -d: -f1 | sort | uniq -c | sort -n
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;或者&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;netstat -ntu | awk '{print $5}' | cut -d: -f1 | sed -n '/[0-9]/p' | sort |
 uniq -c | sort -nr
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;下一段会过滤掉其中不是 IP 的一些记录，结果如下：
&lt;img src=&quot;/img/p-iptables/netstat_result.png&quot; alt=&quot;&quot; /&gt;
第一个表示每个IP当前的连接数，一般IP几十个以内都算比较正常。如果突然某个IP的连接数有成百上千个，那肯定就不正常了。&lt;/p&gt;

&lt;h4 id=&quot;1安装-ddos-deflate&quot;&gt;1.安装 DDoS deflate&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# cd /tmp
# wget http://www.inetbase.com/scripts/ddos/install.sh
# chmod 0700 install.sh
# ./install.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;分别是：1.下载文件，2.给文件添加权限，3.执行安装 &lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&quot;2配置-ddos-deflate&quot;&gt;2.配置 DDoS deflate&lt;/h4&gt;

&lt;p&gt;文件安装目录位于 &lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/local/ddos&lt;/code&gt;，其中文件有：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;ddos.conf&lt;/strong&gt;     	// 相关配置文件&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;ssos.sh&lt;/strong&gt;		  		// shell脚本&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;ignore.ip.list&lt;/strong&gt;	// ip白名单&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;LICENSE&lt;/strong&gt;				// 许可&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ddos.conf&lt;/code&gt; 配置如下&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;##### Paths of the script and other files
PROGDIR=&quot;/usr/local/ddos&quot;
PROG=&quot;/usr/local/ddos/ddos.sh&quot;
IGNORE_IP_LIST=&quot;/usr/local/ddos/ignore.ip.list&quot; # ip 地址白名单
CRON=&quot;/etc/cron.d/ddos.cron&quot;	# 定时任务位置
APF=&quot;/etc/apf/apf&quot;		# APF
IPT=&quot;/sbin/iptables&quot;		# iptables

##### frequency in minutes for running the script
##### Caution: Every time this setting is changed, run the script with --cron
#####          option so that the new frequency takes effect
FREQ=1		# 检测时间间隔，默认为1分钟

##### How many connections define a bad IP? Indicate that below.
NO_OF_CONNECTIONS=150		# 一个IP下的最大连接数,超过就会屏蔽

##### APF_BAN=1 (Make sure your APF version is atleast 0.96)
##### APF_BAN=0 (Uses iptables for banning ips instead of APF)
APF_BAN=0	# 使用 APF还是iptables，推荐使用 iptables，将APF_BAN 改为0即可。
# APF 是基于 iptables 的防火墙

##### KILL=0 (Bad IPs are'nt banned, good for interactive execution of script)
##### KILL=1 (Recommended setting)
KILL=1		# 是否屏蔽禁止IP，默认。

##### An email is sent to the following address when an IP is banned.
##### Blank would suppress sending of mails
EMAIL_TO=&quot;1@vincents.cn&quot;	# 当IP被屏蔽时给指定邮箱发送邮件。

##### Number of seconds the banned ip should remain in blacklist.
BAN_PERIOD=600			# 禁用IP时长,默认为600秒
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ddos.sh&lt;/code&gt; 中，可以将第 117 行的内容修改为，就是上面那句 &lt;em&gt;netstat&lt;/em&gt; 命令：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;netstat -ntu | awk '{print $5}' | cut -d: -f1 | sed -n '/[0-9]/p' | sort |
 uniq -c | sort -nr
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;有文件内容更改后，执行：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# sh /usr/local/ddos/ddos.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;会在&lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/cron.d/&lt;/code&gt;目录下生成一个定时任务&lt;code class=&quot;highlighter-rouge&quot;&gt;ddos.cron&lt;/code&gt;。内容为：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;0-59/1 * * * * root /usr/local/ddos/ddos.sh &amp;gt;/dev/null 2&amp;gt;&amp;amp;1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;3测试&quot;&gt;3.测试&lt;/h4&gt;

&lt;p&gt;接下来你就可以使用压力测软件 &lt;a href=&quot;/2017/03/28/web-pressure-test/&quot;&gt;webbench,Siege&lt;/a&gt; 来进行测试实验了。我的测试结果如下， 通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;webbench&lt;/code&gt; 开启压力测试后，IP就立即被封禁，且很快就收到邮件,效果还是非常明显的。
&lt;img src=&quot;/img/p-iptables/ddos_result.png&quot; alt=&quot;&quot; /&gt;
ps: 为了让图片少占点位置，只有这么拼接一下了。将就看。。。&lt;/p&gt;

&lt;h2 id=&quot;参考学习&quot;&gt;参考学习&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/argb/p/3535179.html&quot;&gt;iptabls&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.liusuping.com/ubuntu-linux/iptables-firewall-setting.html&quot;&gt;iptabls配置详解&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.linuxidc.com/Linux/2012-08/67505.htm&quot;&gt;iptables四个表与五个链间的处理关系&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://yq.aliyun.com/ziliao/116528?spm=5176.8246799.0.0.JIvrMb&quot;&gt;Shell实现的iptables管理脚本&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.vpser.net/security/ddos-deflate.html&quot;&gt;DDoS deflate - Linux下防御/减轻DDOS攻击&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
        <pubDate>Sat, 26 Aug 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/08/26/iptables_ddos-deflate/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/08/26/iptables_ddos-deflate/</guid>
        
        <category>CentOS</category>
        
        <category>Web服务器</category>
        
        
      </item>
    
      <item>
        <title>Charles 抓取HTTPS数据包</title>
        <description>&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://www.charlesproxy.com/&quot;&gt;Charles&lt;/a&gt; 是一款在Mac下常用的网络封包截取工具。Charles 可以将自己设置为系统的网络代理服务器，使得所有的网络请求都通过它来完成。这样，方便自己开发的时候进行接口调试和已经调试别的APP网络接口。。。&lt;/p&gt;

&lt;h2 id=&quot;启用http代理&quot;&gt;启用HTTP代理&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/img/p-charles/charles-set.png&quot; alt=&quot;&quot; /&gt;
这里启用 Charles 的代理，设置代理IP 为 &lt;code class=&quot;highlighter-rouge&quot;&gt;8888&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;打开终端输入 ifconfig 查看当前的局域网IP&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ifconfig
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/img/p-charles/ifconfig.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;然后将手机连入同一个Wi-Fi, 在Wi-Fi的 HTTP代理中设置为电脑的IP地址和端口。&lt;/p&gt;

&lt;p&gt;Charles弹出确认框，点击Allow按钮即就可以愉快的获取到数据包信息啦。&lt;/p&gt;

&lt;h2 id=&quot;如何使用https代理&quot;&gt;如何使用HTTPS代理&lt;/h2&gt;

&lt;h4 id=&quot;电脑端设置&quot;&gt;电脑端设置&lt;/h4&gt;

&lt;p&gt;想要抓取https的包的话，需要使用Charles自己的CA证书并进行
&lt;img src=&quot;/img/p-charles/charles-https-set.png&quot; alt=&quot;&quot; /&gt;
打开钥匙串，点击证书详情，设置为始终信任
&lt;img src=&quot;/img/p-charles/chain-set.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;手机端设置&quot;&gt;手机端设置&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/img/p-charles/charles-https-set-ios.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如果你已经将手机的网络代理设置 Charles，那么可以直接在浏览器中输入网址 &lt;code class=&quot;highlighter-rouge&quot;&gt;charlesproxy.com/getssl&lt;/code&gt; ,会提示安装证书描述文件:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/p-charles/iphone-profile.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;安装证书
点击安装即可，如果出现的不是这个界面，那么把链接换成 https://www.charlesproxy.com/documentation/additional/legacy-ssl-proxying/，点击安装 itself 后面的 here 就可以了。&lt;/p&gt;

&lt;p&gt;设置监听端口&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/p-charles/charles-https-set2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这里是设置所有的地址的 443 端口都进行代理。如果只抓取部分，也可以进行单独的地址设置。&lt;/p&gt;

&lt;p&gt;现在就可以愉快的玩耍啦~ 以知乎为例&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/p-charles/charles-https-result-zhihu.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;问题解决&quot;&gt;问题解决&lt;/h2&gt;
&lt;h4 id=&quot;ios-103-以上-https-代理问题&quot;&gt;iOS 10.3 以上 HTTPS 代理问题&lt;/h4&gt;
&lt;p&gt;因为升级到 iOS11 后发现 HTTPS 不能使用了，需要在&lt;code class=&quot;highlighter-rouge&quot;&gt;关于本机&lt;/code&gt;-&lt;code class=&quot;highlighter-rouge&quot;&gt;证书信任设置&lt;/code&gt;中开启完全信任。
&lt;img src=&quot;/img/p-charles/charles-https-set-about.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;参考学习&quot;&gt;参考学习&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.infoq.com/cn/articles/network-packet-analysis-tool-charles&quot;&gt;iOS开发工具——网络封包分析工具Charles&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/chenlogin/p/5849471.html&quot;&gt;charles https抓包&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
        <pubDate>Wed, 09 Aug 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/08/09/charles-https-proxy/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/08/09/charles-https-proxy/</guid>
        
        <category>macOS</category>
        
        
      </item>
    
      <item>
        <title>CentOS LAMP/LEMP 等各种服务环境搭建</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;由于之前捣鼓学习一些东西所作的笔记等都存放在印象笔记中，比较分散和杂乱。加上又准备更新自己的博客，
于是将折腾阿里云服务器整理出来，这篇会持续更新。(&lt;em&gt;^__^&lt;/em&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;l---linux--一台云服务器&quot;&gt;L - Linux &amp;gt; 一台云服务器&lt;/h2&gt;

&lt;p&gt;首先你得有一台云服务器。常用的云服务提供商有，&lt;code class=&quot;highlighter-rouge&quot;&gt;阿里云&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;腾讯云&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;亚马逊 AWS&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;微软 Azure&lt;/code&gt;等。
但是在国内的话，个人还是比较推荐阿里云。最低配一个月60块钱的样子。&lt;/p&gt;

&lt;p&gt;购买后阿里云会给你分配一个云服务器的公网IP地址。通过 SSH 连接云服务器：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ssh root@xxx.xxx.xxx.xxx

输入密码
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;yum&quot;&gt;yum&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;Yum（全称为 Yellow dog Updater, Modified）是一个在Fedora和RedHat以及CentOS中的Shell前端软件包管理器。基于RPM包管理，能够从指定的服务器自动下载RPM包并且安装，可以自动处理依赖性关系，并且一次安装所有依赖的软件包，无须繁琐地一次次下载、安装。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;通过 yum 命令我们可以很方便的安装管理例如 mysql，php等常用的软件包服务。&lt;/p&gt;

&lt;p&gt;yum 命令格式为：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;yum [options] [command] [package ...]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;更新源&quot;&gt;更新源&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;yum update

yum upgrade
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;a---apache---httpd&quot;&gt;A - Apache -&amp;gt; httpd&lt;/h2&gt;

&lt;p&gt;Apache 在Linux系统中，叫 &lt;strong&gt;httpd&lt;/strong&gt;。O__O “…&lt;/p&gt;

&lt;h4 id=&quot;安装-apache&quot;&gt;安装 Apache&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;yum install httpd
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;&amp;gt;&lt;/strong&gt; 启动Apache&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;systemctl start httpd.service 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这时在浏览器中输入IP地址，你可以看到Apache的Test页面。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&amp;gt;&lt;/strong&gt; 关闭Apache&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;systemctl stop httpd.service
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;&amp;gt;&lt;/strong&gt; 设置Apache开启自动启动&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;systemctl enable httpd.service 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;使用&quot;&gt;使用&lt;/h4&gt;

&lt;p&gt;Apache 在CentOS中默认的根目录在 &lt;code class=&quot;highlighter-rouge&quot;&gt;/var/www/html&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Apache 相关的配置文件目录在 &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/httpd/conf/httpd.conf&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;其他相关的配置文件目录在 &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/httpd/conf.d/&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;j---java&quot;&gt;J - Java&lt;/h2&gt;

&lt;p&gt;查看可用的 JDK软件包列表:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;yum search java | grep -i --color JDK
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;安装 java-jdk&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;yum install java-1.8.0-openjdk  java-1.8.0-openjdk-devel  #安装openjdk
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;查看当前 java 版本&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;java -version     #查看java版本
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;java 存放的地址  &lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/lib/jvm&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&quot;配置-java-环境变量&quot;&gt;配置 Java 环境变量&lt;/h4&gt;

&lt;p&gt;将 jdk 拷贝到 /usr/local/java 目录下。没有的话 &lt;code class=&quot;highlighter-rouge&quot;&gt;mkdir&lt;/code&gt;创建，统一放到 /usr/local 目录下便于管理。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd /usr/lib/jvm

cp -R java-1.8.0-openjdk /usr/local/java/jdk1.8
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h6 id=&quot;配置环境变量&quot;&gt;配置环境变量&lt;/h6&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vi /etc/profile
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;将下面内容添加到文件末尾，for循环后面。这里直接引用 /usr/lib/jvm 目录下的 JDK也是可以的。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;export JAVA_HOME=/usr/local/java/jdk1.8
export PATH=$JAVA_HOME/bin:$PATH:
export JAVA_BIN=$JAVA_HOME/bin
export CLASSPATH=.:$JAVA_HOME/lib/tools.jar:$JAVA_HOME/lib/dt.jar
export JAVA_HOME JAVA_BIN PATH CLASSPAT
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;让配置立即生效&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;source /etc/profile
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;检查环境变量&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# echo $JAVA_HOME

-&amp;gt; /usr/local/java/jdk1.8
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;t---tomcat&quot;&gt;T - Tomcat&lt;/h2&gt;

&lt;p&gt;Tomcat 官网 : &lt;a href=&quot;http://tomcat.apache.org/&quot;&gt;http://tomcat.apache.org/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;选择一个版本的 tar.gz 文件进行下载&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# wget http://ftp.cuhk.edu.hk/pub/packages/apache.org/tomcat/tomcat-6/v6.0.51/bin/apache-tomcat-6.0.51.tar.gz

# tar -zxvf apache-tomcat-6.0.51.tar.gz   # 解压

拷贝 tomcat 到 /usr/local 目录下

# cp -R apache-tomcat-6.0.51 /usr/local/tomcat7
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;使用-1&quot;&gt;使用&lt;/h4&gt;

&lt;p&gt;启动Tomcat&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd /usr/local/tomcat7/bin

sh startup.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;停止Tomcat&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sh shutdown.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;m---mysql---mariadb&quot;&gt;M - MySQL -&amp;gt; MariaDB&lt;/h2&gt;

&lt;p&gt;MySQL本身是开源免费的，但是在Mysql被Oracle收购后，有将MySQL闭源的风险。MariaDB是MySQL源代码的一个分支，是由MySQL的创始人麦克尔·维德纽斯主导开发，使用这些分支避免这个潜在的风险。&lt;/p&gt;

&lt;p&gt;详细的一些区别参考这篇：&lt;a href=&quot;http://bijian1013.iteye.com/blog/2315665&quot;&gt;浅谈MySQL和mariadb区别&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&amp;gt;&lt;/em&gt; centOS 7 以后，软件源中默认的是MariaDB 而不是MySQL&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&amp;gt;&lt;/strong&gt; 安装 MariaDB&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;yum install mariadb-server -y
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;&amp;gt;&lt;/strong&gt; 启动 MariaDB&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;systemctl start mariadb.service
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;&amp;gt;&lt;/strong&gt; 停止 MariaDB&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;systemctl stop mariadb.service
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;&amp;gt;&lt;/strong&gt; 设置开启自动启动&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;systemctl enable mariadb.service
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;进入MySQL，第一次进入不用密码需要自己修改&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[root@VM_140_194_centos ~]# mysql
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/img/p-centos-lnmp/mysql-login.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&amp;gt;&lt;/strong&gt; 修改MySQL密码&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mysql_secure_installation
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;根据提示进行设置。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&amp;gt;&lt;/strong&gt; 创建用户以及分配权限&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 创建用户
CREATE USER 'vincent'@'localhost' IDENTIFIED BY 'password';
# 分配权限
grant create,alter,select,insert,update,delete on *.* to vincent@localhost IDENTIFIED BY 'password';

# 收回权限
revoke create,alter,select,insert,update,delete on mysql.* from 'vincent'@'localhost';
# 刷新系统权限
flush privileges;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;&amp;gt;&lt;/strong&gt; 常见错误&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Access denied for user ‘root@localhost’ (using password:NO)&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; systemctl stop mariadb.service
&amp;gt; mysqld_safe --skip-grant-tables &amp;amp;
# 可以不用密码进入MySQL
&amp;gt; mysql
&amp;gt; use mysql;
&amp;gt; truncate table user;
&amp;gt; flush privileges;

&amp;gt; grant all privileges on *.* to root@localhost identified by 'YourNewPassword' with grant option;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;备份数据库&quot;&gt;备份数据库&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mysqldump -u[用户名] -p[用户密码] --host=[localhost(可以不填)] [导出的数据库名] | gzip &amp;gt;  [导出地址]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;例如：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mysqldump -uroot -proot --host=localhost database | gzip &amp;gt; /home/backup/database.sql.gz
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;推荐一个文件/数据库监控和数据库备份的脚本工具。
&lt;a href=&quot;https://github.com/zsenliao/shellMonitor/blob/master/&quot;&gt;shellMonitor&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;p---php&quot;&gt;P - PHP&lt;/h2&gt;

&lt;p&gt;我自己使用到PHP的地方一般也只是用它来使用 &lt;strong&gt;PHPMyAdmin&lt;/strong&gt;，而web服务也是用 Java或者Python开发的，所以PHP用得比较少。&lt;/p&gt;

&lt;h4 id=&quot;安装&quot;&gt;安装&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;yum install php
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;&amp;gt;&lt;/strong&gt; 需要重启一下Apache服务&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;service httpd restart
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;测试一下是否安装好&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# vi /var/www/html/info.php

输入 i 进行插入

# &amp;lt;?php phpinfo(); ?&amp;gt;

ESC -&amp;gt; 英文冒号 -&amp;gt; wq 保存退出
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后再浏览器地址中输入 &lt;code class=&quot;highlighter-rouge&quot;&gt;ip地址/info.php&lt;/code&gt;，这时应该能看到到当前的 php信息。&lt;/p&gt;

&lt;h4 id=&quot;关联-php-和-mysql&quot;&gt;关联 PHP 和 MySQL&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;yum install php-mysql php-gd php-imap php-ldap php-odbc php-pear php-xml php-xmlrpc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;安装完后重启 Apache&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;systemctl restart httpd.service
或者
service httpd restart
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后在 info.php 中就能看到mysql的模块。&lt;/p&gt;

&lt;h4 id=&quot;安装-phpmyadmin&quot;&gt;安装 phpMyadmin&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;yum install phpMyAdmin php-mcrypt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;安装完后会在 &lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/share&lt;/code&gt; 目录下有个 &lt;strong&gt;phpMydmin&lt;/strong&gt;目录，将该目录拷贝的 html 目录下。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# cd /usr/share
# cp -a phpMyAdmin/ /var/www/html/phpmyadmin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h6 id=&quot;一些错误&quot;&gt;一些错误&lt;/h6&gt;

&lt;p&gt;The mbstring extension is missing. Please check your PHP configuration.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# vi /etc/php.ini
	
在 [PHP] 下面插入
	
# extension=php_mbstring.dll
   
* 重启 httpd.service
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You don’t have permission to access /phpmyadmin/ on this server.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vi /etc/httpd/conf.d/phpMyAdmin.conf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/img/p-centos-lnmp/phpmyadmin-permission.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;n---nginx&quot;&gt;N - Nginx&lt;/h2&gt;

&lt;h4 id=&quot;有了apache为什么要使用-nginx&quot;&gt;有了Apache为什么要使用 Nginx&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;http://willis.blog.51cto.com/11907152/1852083&quot;&gt;Apache, Tomcat, Nginx的区别&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Apache 和 Nginx 都叫做 [&lt;em&gt;HTTP Server&lt;/em&gt;]，Tomcat这一类的则是 [&lt;em&gt;Application Server&lt;/em&gt;]。&lt;/p&gt;

&lt;p&gt;Nginx 相对于Apache而言，具有&lt;/p&gt;

&lt;h4 id=&quot;安装-1&quot;&gt;安装&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;yum install nginx
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;&amp;gt;&lt;/strong&gt; 启动 Nginx 。注意，Apache和Nginx默认都是监听的80端口，所以注意端口占用，要么修改默认的端口。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# nginx
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&amp;gt;&lt;/strong&gt; 停止nginx&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;nginx -s stop
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;&amp;gt;&lt;/strong&gt; 重启nginx&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# nginx -s reload
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;nginx 相关配置文件路径 ：&lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/nginx/nginx.conf&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;r---redis&quot;&gt;R - Redis&lt;/h2&gt;

&lt;p&gt;Redis是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&amp;gt;&lt;/strong&gt; 安装&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;yum install -y redis
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;&amp;gt;&lt;/strong&gt; 启动&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;systemctl start redis
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;&amp;gt;&lt;/strong&gt; 开机启动&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;systemctl enable redis
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;&amp;gt;&lt;/strong&gt; 停止&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;systemctl stop redis
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;f---ftp&quot;&gt;F - FTP&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;vsftpd&lt;/strong&gt; 是Linux 下比较著名的FTP服务器。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&amp;gt;&lt;/strong&gt;安装&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;yum -y install vsftpd
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;&amp;gt;&lt;/strong&gt;相关操作&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# systemctl start vsftpd     # 启动 vsftpd
# systemctl enable vsftpd		# 设置开机启动
# systemctl stop vsftpd		# 停止 vsftpd
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;修改配置文件&quot;&gt;修改配置文件&lt;/h4&gt;

&lt;p&gt;打开 &lt;strong&gt;/etc/vsftpd/vsftpd.conf&lt;/strong&gt;，修改配置：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;anonymous_enable=NO 	#设定不允许匿名访问
local_enable=YES 			#设定本地用户可以访问。注：如使用虚拟宿主用户，在该项目设定为NO的情况下所有虚拟用户将无法访问
ascii_upload_enable=YES
ascii_download_enable=YES #设定支持ASCII模式的上传和下载功能
chroot_list_enable=YES 	#使用户不能离开主目录
pam_service_name=vsftpd   #PAM认证文件名。PAM将根据/etc/pam.d/vsftpd进行认证
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;以下这些是关于vsftpd虚拟用户支持的重要配置项，默认vsftpd.conf中不包含这些设定项目，需要自己手动添加&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;guest_enable=YES			#设定启用虚拟用户功能
guest_username=ftp		#指定虚拟用户的宿主用户，CentOS中已经有内置的ftp用户了
user_config_dir=/etc/vsftpd/vuser_conf #设定虚拟用户个人vsftp的CentOS FTP服务文件存放路径。存放虚拟用户个性的CentOS FTP服务文件(配置文件名=虚拟用户名
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;添加用户&quot;&gt;添加用户&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;useradd vicnent 	# 添加一个用户
passwd vincent		# 给用户设置密码
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在 &lt;code class=&quot;highlighter-rouge&quot;&gt;/home&lt;/code&gt; 路径下，就会多出一个 &lt;strong&gt;vincent&lt;/strong&gt; 的文件夹。&lt;/p&gt;

&lt;p&gt;然后就可以在其他电脑上通过FileZilla这类的FTP软件进行上传下载文件了。但是要注意文件的权限。&lt;/p&gt;

</description>
        <pubDate>Fri, 31 Mar 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/03/31/centos-lamp/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/03/31/centos-lamp/</guid>
        
        <category>Web服务器</category>
        
        
      </item>
    
      <item>
        <title>Web服务器压力测试工具 - webbench,Siege</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;Webbench是有名的网站压力测试工具，它是由 Lionbridge公司开发。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;因为之前公司网站的服务器各种拒绝连接，想要测试一下网站的QPS(每秒查询率)，看下大概能到多少并发，于是找到这个工具。但是结果果然超乎想象，2333…&lt;/p&gt;

&lt;h2 id=&quot;webbench&quot;&gt;Webbench&lt;/h2&gt;

&lt;p&gt;webbench是有名的网站压力测试工具，最多可以模拟3万个并发连接去测试网站的负载能力。&lt;/p&gt;

&lt;p&gt;webbench能测试处在相同硬件上，不同服务的性能以及不同硬件上同一个服务的运行状况。&lt;/p&gt;

&lt;p&gt;webbench的标准测试可以向我们展示服务器的两项内容：每秒钟相应请求数和每秒钟传输数据量。&lt;/p&gt;

&lt;h4 id=&quot;mac安装&quot;&gt;MAC安装&lt;/h4&gt;

&lt;p&gt;在Mac环境下，通过&lt;code class=&quot;highlighter-rouge&quot;&gt;brew&lt;/code&gt;进行安装&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;brew install ctags # 依赖安装

wget http://blog.zyan.cc/soft/linux/webbench/webbench-1.5.tar.gz

tar -zxvf webbench-1.5.tar.gz

cd webbench-1.5

sudo mkdir -pv /usr/local/man/man1 # 创建文件夹

sudo make &amp;amp;&amp;amp; sudo make install # 安装

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;使用&quot;&gt;使用&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;webbench -c 100 -t 30 [URL]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;参数说明：&lt;code class=&quot;highlighter-rouge&quot;&gt;-c&lt;/code&gt;表示并发数，&lt;code class=&quot;highlighter-rouge&quot;&gt;-t&lt;/code&gt;表示时间(秒)&lt;/p&gt;

&lt;h4 id=&quot;相关命令&quot;&gt;相关命令&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
webbench [option]... URL

  -f|--force               压测时不等待服务端返回
  -r|--reload              Send reload request - Pragma: no-cache.
  -t|--time &amp;lt;sec&amp;gt;          压测时间/s, 默认30/s
  -p|--proxy &amp;lt;server:port&amp;gt; 使用代理来进行请求
  -c|--clients &amp;lt;n&amp;gt;         并发数量默认1个
  -9|--http09              使用HTTP/0.9 协议请求
  -1|--http10              使用HTTP/1.0 协议请求
  -2|--http11              使用HTTP/1.1 协议请求
  --get                    使用GET方式请求
  --head                   使用 HEAD 方式请求
  --options                Use OPTIONS request method.
  --trace                  Use TRACE request method.
  -?|-h|--help             This information.
  -V|--version             显示当前版本

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;使用结果&quot;&gt;使用结果&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/img/p-web-test-tool/webbench-result.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;貌似只有 0 failed 访问才不会有太大影响。其他或多或少都会有影响。 神经病的马赛克。~&lt;/p&gt;

&lt;h2 id=&quot;siege&quot;&gt;Siege&lt;/h2&gt;

&lt;p&gt;一款开源的压力测试工具，可以根据配置对一个WEB站点进行多用户的并发访问，记录每个用户所有请求过程的相应时间，并在一定数量的并发访问下重复进行。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;最新版本：&lt;a href=&quot;http://download.joedog.org/siege/siege-latest.tar.gz&quot;&gt;http://download.joedog.org/siege/siege-latest.tar.gz&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;源代码：&lt;a href=&quot;https://github.com/JoeDog/siege.git&quot;&gt;https://github.com/JoeDog/siege.git&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;mac-安装&quot;&gt;mac 安装&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# wget http://download.joedog.org/siege/siege-latest.tar.gz
# tar -zxvf siege-latest.tar.gz
# cd siege-latest/
# ./configure
# make &amp;amp;&amp;amp; make install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;相关命令-1&quot;&gt;相关命令&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-V, --version             VERSION, prints the version number.
  -h, --help                HELP, prints this section.
  -C, --config              CONFIGURATION, show the current config.
  -v, --verbose             VERBOSE, prints notification to screen.
  -q, --quiet               QUIET turns verbose off and suppresses output.
  -g, --get                 GET, pull down HTTP headers and display the
                            transaction. Great for application debugging.
  -c, --concurrent=NUM      CONCURRENT users, default is 10
  -i, --internet            INTERNET user simulation, hits URLs randomly.
  -b, --benchmark           BENCHMARK: no delays between requests.
  -t, --time=NUMm           TIMED testing where &quot;m&quot; is modifier S, M, or H
                            ex: --time=1H, one hour test.
  -r, --reps=NUM            REPS, number of times to run the test.
  -f, --file=FILE           FILE, select a specific URLS FILE.
  -R, --rc=FILE             RC, specify an siegerc file
  -l, --log[=FILE]          LOG to FILE. If FILE is not specified, the
                            default is used: PREFIX/var/siege.log
  -m, --mark=&quot;text&quot;         MARK, mark the log file with a string.
  -d, --delay=NUM           Time DELAY, random delay before each requst
                            between .001 and NUM. (NOT COUNTED IN STATS)
  -H, --header=&quot;text&quot;       Add a header to request (can be many)
  -A, --user-agent=&quot;text&quot;   Sets User-Agent in request
  -T, --content-type=&quot;text&quot; Sets Content-Type in request
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;使用-1&quot;&gt;使用&lt;/h4&gt;

&lt;p&gt;100个并发访问 &lt;code class=&quot;highlighter-rouge&quot;&gt;http://www.baidu.com&lt;/code&gt;，并重复20次&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;siege -c 100 -r 20 http://www.baidu.com
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在 urls.txt 中列出所有网址&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;siege -c 100 -r 20 -f urls.txt  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;随机选取 urls.txt 中列出的网址&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;siege -c 100 -r 20 -f urls.txt -i
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;不等待返回结果,100个并发随机选取urls.txt重复请求20个&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;siege -c 2000 -r 100 -f urls.txt -i -b  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;»&lt;/strong&gt; 指定 http 请求头请求&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;siege -H &quot;Content-Type:application/json&quot; -c 100 -r 20 -f urls.txt -i -b  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;»&lt;/strong&gt; POST 请求&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;siege -c 100 -r 20 http://www.baidu.com/ POST p1=v1&amp;amp;p2=v2  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;siege-输出结果说明&quot;&gt;Siege 输出结果说明&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/img/p-web-test-tool/siege-result.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Transactions&lt;/td&gt;
      &lt;td&gt;总共测试次数&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Availability&lt;/td&gt;
      &lt;td&gt;成功次数百分比&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Elapsed time&lt;/td&gt;
      &lt;td&gt;总共耗时多少秒&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Data transferred&lt;/td&gt;
      &lt;td&gt;总共数据传输&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Response time&lt;/td&gt;
      &lt;td&gt;等到响应耗时&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Transaction rate&lt;/td&gt;
      &lt;td&gt;平均每秒处理请求数&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Throughput&lt;/td&gt;
      &lt;td&gt;吞吐率&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Concurrency&lt;/td&gt;
      &lt;td&gt;最高并发&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Successful transactions&lt;/td&gt;
      &lt;td&gt;成功的请求数&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Failed transactions&lt;/td&gt;
      &lt;td&gt;失败的请求数&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;end&quot;&gt;END&lt;/h2&gt;

&lt;p&gt;性能测试工具目前最常见的有以下几种：&lt;code class=&quot;highlighter-rouge&quot;&gt;ab&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;webbench&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;http_load&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;siege&lt;/code&gt;，后面有用到再来试试。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.open-open.com/news/view/d6dff4&quot;&gt;Webbench 一款 Linux 下的压力测试工具 for Mac&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.skyf.org/webbench-web-test-tools/&quot;&gt;记录：Web服务器压力测试工具WebBench、Siege&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Tue, 28 Mar 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/03/28/web-pressure-test/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/03/28/web-pressure-test/</guid>
        
        <category>Web服务器</category>
        
        
      </item>
    
  </channel>
</rss>
